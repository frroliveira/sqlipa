// Abstract for all classes that can't be used.
// All classes extend except Node.
// Add 'final' where necessary.
namespace stmt {
    SqlStatementList {
        List<SqlStatement> stmts;
    }

    SqlStatement {
        enum Explain {
            NORMAL,
            PLAN
        }

        Explain explain;

        AlterTableStmt {
            DatabaseName db;
            TableName tab;

            RenameTableStmt {
                TableName newTab;
            }

            AddColumnStmt {
                ColumnDef column;
            }
        }

        AnalyzeStmt {
            Name first;
            Name second;
        }

        AttachStmt {
            Expression expr;
            DatabaseName db;
        }

        BeginStmt {
            enum Type {
                DEFERRED,
                IMMEDIATE,
                EXCLUSIVE
            }

            Type type;
        }

        CommitStmt {
        }

        RollbackStmt {
            SavepointName savepoint;
        }

        SavepointStmt {
            SavepointName savepoint;
        }

        ReleaseStmt {
            SavepointName savepoint;
        }

        namespace create {
            CreateStmt {
                boolean ifNotExists;
                DatabaseName db;
                Name name;

                CreateIndexStmt {
                    boolean unique;
                    TableName tab;
                    List<IndexedColumn> columns;
                }

                CreateTableStmt {
                    boolean temp;

                    CreateTableStmtWithColumns {
                        List<ColumnDef> columns;
                        List<TableConstraint> constraints;
                    }
                    
                    CreateTableStmtWithSelect {
                        SelectStmt select;
                    }
                }

                CreateTriggerStmt {
                    enum Time {
                        BEFORE,
                        AFTER,
                        INSTEAD_OF
                    }
                    
                    enum Event {
                        DELETE,
                        INSERT,
                        UPDATE
                    }

                    boolean temp;
                    boolean forEachRow;
                    Time time;
                    Event event;
                    List<ColumnName> columns;
                    TableName tab;
                    Expression when;
                    List<EventStmt> stmts;
                }

                CreateViewStmt {
                    boolean temp;
                    SelectStmt select;
                }

                CreateVirtualTableStmt {
                    ModuleName module;
                    List<ModuleArgument> args;
                }
            }
        }
        
        DetachStmt {
            DatabaseName db;
        }

        namespace drop {
            DropStmt {
                boolean ifExists;
                DatabaseName db;
                Name name;

                DropIndexStmt {
                }

                DropTableStmt {
                }

                DropTriggerStmt {
                }

                DropViewStmt {
                }
            }
        }

        namespace event {
            EventStmt {
                DeleteStmt {
                    QualifiedTableName tab;
                    Expression where;
                    EventResultConstraint constraint;
                }

                InsertStmt {
                    enum Type {
                        INSERT,
                        INSERT_OR_ROLLBACK,
                        INSERT_OR_ABORT,
                        INSERT_OR_REPLACE,
                        INSERT_OR_FAIL,
                        INSERT_OR_IGNORE,
                        REPLACE
                    }

                    Type type;
                    DatabaseName db;
                    TableName tab;

                    InsertStmtDefault {
                    }

                    InsertStmtWithValues {
                        List<ColumnName> columns;
                        List<List<Expression>> rows;
                    }

                    InsertStmtWithSelect {
                        List<ColumnName> columns;
                        SelectStmt select;
                    }
                }

                namespace select {
                    SelectStmt {
                        SelectUnit unit;
                        EventResultConstraint constraint;
                    }

                    SelectUnit {
                        SelectCore {
                            boolean distinct;
                            List<ResultColumn> columns;
                            JoinSrc from;
                            Expression where;
                            List<Expression> groupBy;
                            Expression having;
                        }
                        
                        SelectCompund {
                            enum Operator {
                                UNION,
                                UNION_ALL,
                                INTERSECT,
                                EXCEPT
                            }
    
                            SelectUnit left;
                            Operator op;
                            SelectUnit right;
                        }
                    }

                    ResultColumn {
                        UniversalColumn {
                            TableName tab;
                        }

                        ExpressionColumn {
                            Expression expr;

                            AliasedColumn {
                                ColumnAlias alias;
                            }
                        }
                    }

                    JoinSrc {
                        SingleSrc {
                            SelectSrc {
                                SelectStmt select;
                                TableAlias alias;
                            }
    
                            TableSrc {
                                DatabaseName db;
                                TableName tab;
                                TableAlias alias;
                                IndexedBy indexed;
                            }
                        }

                        JoinCompound {
                            enum Operator {
                                COMMA,
                                JOIN,
                                LEFT_JOIN,
                                LEFT_OUTER_JOIN,
                                INNER_JOIN,
                                CROSS_JOIN,
                                NATURAL_JOIN,
                                NATURAL_LEFT_JOIN,
                                NATURAL_LEFT_OUTER_JOIN,
                                NATURAL_INNER_JOIN,
                                NATURAL_CROSS_JOIN
                            }
    
                            JoinSrc left;
                            Operator op;
                            JoinSrc right;
                            JoinConstraint constraint;
                        }
                    }

                    JoinConstraint {
                        JoinConstraintOn {
                            Expression expr;
                        }

                        JoinConstraintUsing {
                            List<ColumnName> columns;
                        }
                    }
                }
                
                namespace update {
                    UpdateStmt {
                        enum Type {
                            UPDATE,
                            UPDATE_OR_ROLLBACK,
                            UPDATE_OR_ABORT,
                            UPDATE_OR_REPLACE,
                            UPDATE_OR_FAIL,
                            UPDATE_OR_IGNORE,
                        }

                        Type type;
                        QualifiedTableName tab;
                        List<ColumnAssign> assigns;
                        Expression where;
                        EventResultConstraint constraint;
                    }

                    ColumnAssign {
                        ColumnName column;
                        Expression expr;
                    }
                }
            }
            
            EventResultConstraint {
                List<OrderingTerm> terms;
                Expression limit;
                Expression offset;
            }
            
            OrderingTerm {
                enum Order {
                    ASC, 
                    DESC
                }

                Expression expr;
                Order order;
            }
        }

        namespace pragma {
            PragmaStmt {
                DatabaseName db;
                PragmaName pragma;
                PragmaValue value;
            }

            PragmaValue {
                NumberPragmaValue {
                    SignedNumber number;
                }

                NamePragmaValue {
                    Name name;
                }

                StringLiteral; // TODO: see better.
            }
        }

        ReindexStmt {
            Name first;
            Name second;
        }

        VacuumStmt {        
        }
    }
}

namespace name {
    Name {
        String name;

        DatabaseName {
        }

        TableName {
        }

        ColumnName {
        }

        IndexName {
        }

        SavepointName {
        }

        TypeName {
            // Merge names into one.
            SignedNumber xDim;
            SignedNumber yDim;
        }

        ConstraintName {
        }

        ModuleName {
        }

        FunctionName {
        }

        PragmaName {
        }
        
        TriggerName {
        }

        Alias {
            ColumnAlias {
            }

            TableAlias {
            }
        }
    }
}

namespace constraint {
    Constraint {
        ConstraintName name;

        ColumnConstraint {

            PrimaryKeyColumnConstraint {
                enum Order {
                    ASC,
                    DESC
                }

                Order order;
                ConflictClause clause;
                boolean autoincrement;
            }

            NotNullColumnConstraint {
                ConflictClause clause;
            }

            UniqueColumnConstraint {
                ConflictClause clause;
            }

            CheckColumnConstraint {
                Expression expr;
            }

            DefaultColumnConstraint {

                NumberColumnConstraint {
                    SignedNumber number;
                }

                LiteralColumnConstraint {
                    LiteralValue literal;
                }

                ExpressionColumnConstraint {
                    Expression expr;
                }
            }

            CollateColumnConstraint {
                CollationName collation;
            }

            ForeignKeyColumnConstraint {
                ForeignKeyClause clause;
            }
        }

        TableConstraint {

            PrimaryKeyTableConstraint {
                List<IndexedColumn> columns;
                ConflictClause clause;
            }

            UniqueTableConstraint {
                List<IndexedColumn> columns;
                ConflictClause clause;
            }

            CheckTableConstraint {
                Expression expr;
            }

            ForeignKeyTableConstraint {
                List<ColumnName> columns;
                ForeignKeyClause clause;
            }
        }
    }

    ForeignKeyClause {
        TableName foreignTab;
        List<ColumnName> columns;
        List<ForeignKeySetting> settings;
    }

    ForeignKeySetting {
        OnForeignKeySett {
            enum Event {
                DELETE,
                UPDATE
            }

            enum Action {
                SET_NULL,
                SET_DEFAULT,
                CASCADE,
                RESTRICT,
                NO_ACTION
            }

            Event event;
            Action action;
        }

        MatchForeignKeySett {
            Name name;
        }

        DeferrableForeignKeySett {
            enum Mode {
                DEFERRED,
                IMMEDIATE
            }

            boolean deferrable;
            Mode mode;
        }
    }

    ConflictClause {
        Action {
            ROLLBACK,
            ABORT,
            FAIL,
            IGNORE,
            REPLACE
        }

        Action action;
    }
}

namespace expr {
    Expression {
        LiteralExpr {
            LiteralValue literal;
        }

        // See better.
        BindParameterExpr {
            String template;
        }

        ColumnReferenceExpr {
            DatabaseName db;
            TableName tab;
            ColumnName column;
        }

        UnaryExpr {
            enum Operator {
                POSITIVE,
                NEGATIVE,
                BITWISE_NOT,
                LOGICAL_NOT,
                EXISTS,
                IS_NULL,
                NOT_NULL
            }

            Operator op;
            Expression expr;
        }

        BinaryExpr {
            enum Operator {
                CONCATENATION,
                MULTIPLICATION,
                DIVISION,
                MODULO,
                ADDITION,
                SUBTRACTION,
                SHIFT_HIGH,
                SHIFT_LOW,
                BITWISE_AND,
                BITWISE_OR,
                ESCAPE,
                LESS,
                LESS_OR_EQUAL,
                GREATER,
                GREATER_OR_EQUAL,
                EQUAL,
                NOT_EQUAL,
                IS,
                IS_NOT,
                LIKE,
                GLOB,
                REGEXP,
                MATCH,
                NOT_LIKE,
                NOT_GLOB,
                NOT_REGEXP,
                NOT_MATCH,
                AND,
                OR
            }

            Expression left;
            Expression right;
            Operator op;
        }

        FunctionExpr {
            FunctionName function;
            List<Expression> ;
            // TODO: finish.
        }

        CastExpr {
            Expression expr;
            TypeName type;
        }

        CollateExpr {
            Expression expr;
            CollationName collation;
        }

        BetweenExpr {
            enum Operator {
                BETWEEN,
                NOT_BETWEEN
            }
            
            Expression expr;
            Expression upper;
            Experssion lower;
            Operator op;
        }

        InExpr {
            enum Operator {
                IN,
                NOT_IN,
            }
            
            Operator op;
            Expression expr;

            InSelectExpr {
                SelectStmt select;
            }

            InSetExpr {
                List<Expression> exprs;
            }

            InTableExpr {
                DatabaseName db;
                TableName tab;
            }
        }
        
        SelectExpr {
            SelectStmt select;
        }
        
        CaseExpr {
            Expression case_;
            Expression else_;
            List<WhenThenExpr> whenThen;
        }

        WhenExpr {
            Expression when;
            Expression then;
        }

        RaiseFunctionExpr {
            enum Type {
                IGNORE,
                ROLLBACK,
                ABORT,
                FAIL
            }

            Type type;
            String error;
        }
    }
}

namespace literal {
    Literal {
        String value;

        NumericLiteral {
        }
        StringLiteral {
        }
        BlobLiteral {
        }
    }
}

IndexedColumn {
    enum Order {
        ASC,
        DESC
    }

    Order order;
    ColumnName column;
    CollationName collation;
}

ColumnDef {
    ColumnName column;
    TypeName type;
    List<ColumnConstraint> constraints;
}

QualifiedTableName {
    DatabaseName db;
    TableName tab;
    IndexedBy indexed;
}

IndexedBy {
    IndexName ind;
}

ModuleArgument {
    String arg;
}