options {
    LOOKAHEAD = 1;
    STATIC = false;
    COMMON_TOKEN_ACTION = true;
    JDK_VERSION = "1.5";
    IGNORE_CASE = true ;
}

PARSER_BEGIN(ASTParser)
package sqlipa.parser;

final class ASTParser {
    public static void main(String args[]) {
        ASTParser parser = new ASTParser(System.in);
        try {
            parser.createTableStmt();
            System.out.println("Accept");
        } catch (ParseException e) {
            System.out.println("Reject");
        }
    }
} 
PARSER_END(ASTParser)

/* WHITE SPACE */

SKIP :
{
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
}

/* COMMENTS */

TOKEN_MGR_DECLS :
{
    private void CommonTokenAction(Token token) {

    }
}

TOKEN:
{
    <ABORT: "ABORT">
|   <ACTION: "ACTION">
|   <ADD: "ADD">
|   <AFTER: "AFTER">
|   <ALL: "ALL">
|   <ALTER: "ALTER">
|   <ANALYZE: "ANALYZE">
|   <AND: "AND">
|   <AS: "AS">
|   <ASC: "ASC">
|   <ATTACH: "ATTACH">
|   <AUTOINCREMENT: "AUTOINCREMENT">
|   <BEFORE: "BEFORE">
|   <BEGIN: "BEGIN">
|   <BETWEEN: "BETWEEN">
|   <BY: "BY">
|   <CASCADE: "CASCADE">
|   <CASE: "CASE">
|   <CAST: "CAST">
|   <CHECK: "CHECK">
|   <COLLATE: "COLLATE">
|   <COLUMN: "COLUMN">
|   <COMMIT: "COMMIT">
|   <CONFLICT: "CONFLICT">
|   <CONSTRAINT: "CONSTRAINT">
|   <CREATE: "CREATE">
|   <CROSS: "CROSS">
|   <CURRENT_DATE: "CURRENT_DATE">
|   <CURRENT_TIME: "CURRENT_TIME">
|   <CURRENT_TIMESTAMP: "CURRENT_TIMESTAMP">
|   <DATABASE: "DATABASE">
|   <DEFAULT: "DEFAULT">
|   <DEFERRABLE: "DEFERRABLE">
|   <DEFERRED: "DEFERRED">
|   <DELETE: "DELETE">
|   <DESC: "DESC">
|   <DETACH: "DETACH">
|   <DISTINCT: "DISTINCT">
|   <DROP: "DROP">
|   <EACH: "EACH">
|   <ELSE: "ELSE">
|   <END: "END">
|   <ESCAPE: "ESCAPE">
|   <EXCEPT: "EXCEPT">
|   <EXCLUSIVE: "EXCLUSIVE">
|   <EXISTS: "EXISTS">
|   <EXPLAIN: "EXPLAIN">
|   <FAIL: "FAIL">
|   <FOR: "FOR">
|   <FOREIGN: "FOREIGN">
|   <FROM: "FROM">
|   <FULL: "FULL">
|   <GLOB: "GLOB">
|   <GROUP: "GROUP">
|   <HAVING: "HAVING">
|   <IF: "IF">
|   <IGNORE: "IGNORE">
|   <IMMEDIATE: "IMMEDIATE">
|   <IN: "IN">
|   <INDEX: "INDEX">
|   <INDEXED: "INDEXED">
|   <INITIALLY: "INITIALLY">
|   <INNER: "INNER">
|   <INSERT: "INSERT">
|   <INSTEAD: "INSTEAD">
|   <INTERSECT: "INTERSECT">
|   <INTO: "INTO">
|   <IS: "IS">
|   <ISNULL: "ISNULL">
|   <JOIN: "JOIN">
|   <KEY: "KEY">
|   <LEFT: "LEFT">
|   <LIKE: "LIKE">
|   <LIMIT: "LIMIT">
|   <MATCH: "MATCH">
|   <NATURAL: "NATURAL">
|   <NO: "NO">
|   <NOT: "NOT">
|   <NOTNULL: "NOTNULL">
|   <NULL: "NULL">
|   <OF: "OF">
|   <OFFSET: "OFFSET">
|   <ON: "ON">
|   <OR: "OR">
|   <ORDER: "ORDER">
|   <OUTER: "OUTER">
|   <PLAN: "PLAN">
|   <PRAGMA: "PRAGMA">
|   <PRIMARY: "PRIMARY">
|   <QUERY: "QUERY">
|   <RAISE: "RAISE">
|   <REFERENCES: "REFERENCES">
|   <REGEXP: "REGEXP">
|   <REINDEX: "REINDEX">
|   <RELEASE: "RELEASE">
|   <RENAME: "RENAME">
|   <REPLACE: "REPLACE">
|   <RESTRICT: "RESTRICT">
|   <RIGHT: "RIGHT">
|   <ROLLBACK: "ROLLBACK">
|   <ROW: "ROW">
|   <SAVEPOINT: "SAVEPOINT">
|   <SELECT: "SELECT">
|   <SET: "SET">
|   <TABLE: "TABLE">
|   <TEMP: "TEMP">
|   <TEMPORARY: "TEMPORARY">
|   <THEN: "THEN">
|   <TO: "TO">
|   <TRANSACTION: "TRANSACTION">
|   <TRIGGER: "TRIGGER">
|   <UNION: "UNION">
|   <UNIQUE: "UNIQUE">
|   <UPDATE: "UPDATE">
|   <USING: "USING">
|   <VACUUM: "VACUUM">
|   <VALUES: "VALUES">
|   <VIEW: "VIEW">
|   <VIRTUAL: "VIRTUAL">
|   <WHEN: "WHEN">
|   <WHERE: "WHERE">
}

void sqlStmtList() :{}
{    (sqlStmt())*
}

SqlStatement sqlStmt() :
{
    Explain explain;
    SqlStatement stmt;
}
{    ["EXPLAIN" ["QUERY" "PLAN"]]
    (   
        stmt = alterTableStmt()
    |   stmt = analyzeStmt()
    |   stmt = attachStmt()
	|   stmt = beginStmt()
	|   stmt = commitStmt()
	|   stmt = createIndexStmt()
	|   stmt = createTableStmt()
	|   stmt = createTriggerStmt()
	|   stmt = createViewStmt()
	|   stmt = createVirtualTableStmt()	|   stmt = deleteStmt()
	|   stmt = deleteStmtLimited()
	|   stmt = detachStmt()
	|   stmt = dropIndexStmt()
	|   stmt = dropTableStmt()
	|   stmt = dropTriggerStmt()
	|   stmt = dropViewStmt()
	|   stmt = insertStmt()
	|   stmt = pragmaStmt()
	|   stmt = reindexStmt()
	|   stmt = releaseStmt()
	|   stmt = rollbackStmt()
	|   stmt = savepointStmt()
	|   stmt = selectStmt()
	|   stmt = updateStmt()
	|   stmt = updateStmtLimited()
	|   stmt = vacuumStmt()
	)
}

void alterTableStmt() :
{
}
{
    ""}

void analyzeStmt() :
{}
{
    ""}

void attachStmt() :
{}
{
    ""}

void beginStmt() :
{}
{
    ""}

void commitStmt() :
{}
{
    ""}

void rollbackStmt() :
{
}
{
    ""
}

void savepointStmt() :
{
}
{
    ""
}

void releaseStmt() :
{
}
{
    ""
}

void createIndexStmt() :
{}
{
    ""}

void indexedColumn() :
{
}
{
    ""}

void createTableStmt() :
{}
{
    "CREATE" 
    ["TEMP" ["ORARY"]]
    "TABLE"
    ["IF NOT EXISTS"]
    [databaseName() "."]
    tableName()
    (
        "(" columnDef() ("," columnDef())* ("," tableConstraint())* ")"
    |   "AS" selectStmt()
    )}

void columnDef() :
{}
{
    columnName()
    [typeName()]
    (columnConstraint())*}

void typeName() :
{}
{
    (name())*
    ["(" signedNumber() ["," signedNumber()] ")"]}

void columnConstraint() :
{}
{
    ["CONSTRAINT" name()]
    (
        "PRIMARY" "KEY" [("ASC" | "DESC")] conflictClause() ["AUTOINCREMENT"]
    |   "NOT" "NULL" conflictClause()
    |   "UNIQUE" conflictClause()
    |   "CHECK" "(" expr() ")"
    |   "DEFAULT" (signedNumber() | literalValue() | "(" expr() ")")    |   "COLLATE" collationName()
    |   foreignKeyClause()
    )
}

void signedNumber() :
{}
{
    [("+" | "-")]
    numericLiteral()}

void tableConstraint() :
{}
{
    ["CONSTRAINT" name()]
    (
        ("PRIMARY" "KEY" | "UNIQUE") "(" indexedColumn() ("," indexedColumn())* ")" conflictClause()
    |   "CHECK" "(" expr() ")"
    |   "FOREIGN" "KEY" "(" columnName() ("," columnName())* ")" foreignKeyClause()
    )}

void foreignKeyClause() :
{}
{
    "REFERENCES"
    foreignTable()
    ["(" columnName() ("," columnName())* ")"]
    (
        "ON"
        (   
            "DELETE"
        |   "UPDATE")
        (
            "SET" "NULL"
        |   "SET" "CASCADE"
        |   "CASCADE"
        |   "RESTRICT"
        |   "NO" "ACTION"
        )
    |   "MATCH" name()
    )*
    [["NOT"] "DEFERRABLE" [("INITIALLY" "DEFERRED" | "INITIALLY" "IMMEDIATE")]]}

void conflictClause() :
{}
{
    [   
        "ON" 
        "CONFLICT"
        (
            "ROLLBACK"
        |   "ABORT"
        |   "FAIL"
        |   "IGNORE"
        |   "REPLACE"
        )
    ]}

void createTriggerStmt() :
{}
{
    ""}

void createViewStmt() :
{}
{
    ""}

void createVirtualTableStmt() :
{}
{
    ""}

void deleteStmt() :
{}
{
    ""}

void deleteStmtLimited() :
{}
{
    ""}

void detachStmt() :
{}
{
    ""}

void dropIndexStmt() :
{}
{
    ""}

void dropTableStmt() :
{}
{
    ""}

void dropTriggerStmt() :
{}
{
    ""}

void dropViewStmt() :
{}
{
    ""}

void expr() :
{}
{
    ""}

void raiseFunction() :
{}
{
    ""}

void literalValue() :
{}
{
    ""}

void numericLiteral() :
{}
{
    ""}

void insertStmt() :
{}
{
    ""}

void pragmaStmt() :
{}
{
    ""}

void pragmaValue() :
{}
{
    ""}

void reindexStmt() :
{}
{
    ""}

void selectStmt() :
{}
{
    ""}


void selectCore() :
{}
{
    ""}


void resultColumn() :
{}
{
    ""}

void joinSource() :
{}
{
    ""}

void singleSource() :
{}
{
    ""}

void joinOp() :
{}
{
    ""}

void joinConstraint() :
{}
{
    ""}

void orderingTerm() :
{}
{
    ""}

void compoundOperator() :
{}
{
    ""}

void updateStmt() :
{}
{
    ""}

void updateStmtLimited() :
{}
{
    ""}

void qualifiedTableName() :
{}
{
    ""}

void vacuumStmt() :
{}
{
    ""}

// Functions not mentioned in the specification.
void databaseName() :
{
}
{
    ""
}

void tableName() :
{
}
{
    ""
}

void name() :
{
}
{
    ""
}