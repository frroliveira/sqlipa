/* Generated By:JavaCC: Do not edit this line. ASTParser.java */
package main.sqlipa.parser;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;

import main.sqlipa.ast.*;
import main.sqlipa.ast.constraint.*;
import main.sqlipa.ast.constraint.table.*;
import main.sqlipa.ast.constraint.column.*;
import main.sqlipa.ast.expr.*;
import main.sqlipa.ast.literal.*;
import main.sqlipa.ast.stmt.*;
import main.sqlipa.ast.stmt.alter.*;
import main.sqlipa.ast.stmt.create.*;
import main.sqlipa.ast.stmt.drop.*;
import main.sqlipa.ast.stmt.event.*;
import main.sqlipa.ast.stmt.event.delete.*;
import main.sqlipa.ast.stmt.event.insert.*;
import main.sqlipa.ast.stmt.event.select.*;
import main.sqlipa.ast.stmt.event.update.*;
import main.sqlipa.ast.stmt.pragma.*;

public final class ASTParser implements ASTParserConstants {

/* Grammar */
  final public SqlStmtList sqlStmtList() throws ParseException {
    SqlStmtList stmtList = new SqlStmtList();
    SqlStatement stmt = null;

    stmtList.stmts =  new ArrayList<SqlStatement>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALTER:
    case ANALYZE:
    case ATTACH:
    case BEGIN:
    case COMMIT:
    case CREATE:
    case DELETE:
    case DETACH:
    case DROP:
    case END:
    case EXPLAIN:
    case INSERT:
    case PRAGMA:
    case REINDEX:
    case RELEASE:
    case REPLACE:
    case ROLLBACK:
    case SAVEPOINT:
    case SELECT:
    case UPDATE:
    case VACUUM:
    case SEMICOLON:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALTER:
      case ANALYZE:
      case ATTACH:
      case BEGIN:
      case COMMIT:
      case CREATE:
      case DELETE:
      case DETACH:
      case DROP:
      case END:
      case EXPLAIN:
      case INSERT:
      case PRAGMA:
      case REINDEX:
      case RELEASE:
      case REPLACE:
      case ROLLBACK:
      case SAVEPOINT:
      case SELECT:
      case UPDATE:
      case VACUUM:
        stmt = sqlStmt();
                stmtList.stmts.add(stmt);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            stmtList.setBegin(token.beginLine, token.beginColumn);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALTER:
        case ANALYZE:
        case ATTACH:
        case BEGIN:
        case COMMIT:
        case CREATE:
        case DELETE:
        case DETACH:
        case DROP:
        case END:
        case EXPLAIN:
        case INSERT:
        case PRAGMA:
        case REINDEX:
        case RELEASE:
        case REPLACE:
        case ROLLBACK:
        case SAVEPOINT:
        case SELECT:
        case UPDATE:
        case VACUUM:
          stmt = sqlStmt();
                    stmtList.stmts.add(stmt);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
        if (stmt == null) {
            stmtList.setBegin(token.beginLine, token.beginColumn);
            stmtList.stmts = null;
        }
        stmtList.setEnd(token.endLine, token.endColumn);
        {if (true) return stmtList;}
    throw new Error("Missing return statement in function");
  }

  final public SqlStatement sqlStmt() throws ParseException {
    int line = 0;
    int column = 0;
    SqlStatement.Explain explain = null;
    SqlStatement stmt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPLAIN:
      jj_consume_token(EXPLAIN);
            line = token.beginLine;
            column = token.beginColumn;
            explain = SqlStatement.Explain.NORMAL;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUERY:
        jj_consume_token(QUERY);
        jj_consume_token(PLAN);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
            explain = SqlStatement.Explain.PLAN;
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALTER:
      stmt = alterTableStmt();
      break;
    case ANALYZE:
      stmt = analyzeStmt();
      break;
    case ATTACH:
      stmt = attachStmt();
      break;
    case BEGIN:
      stmt = beginStmt();
      break;
    case COMMIT:
    case END:
      stmt = commitStmt();
      break;
    default:
      jj_la1[6] = jj_gen;
      if (jj_2_1(2)) {
        // Decide what type of CREATE is being parsed.
                stmt = createIndexStmt();
      } else if (jj_2_2(2)) {
        // Decide what type of CREATE is being parsed.
                stmt = createTableStmt();
      } else if (jj_2_3(2)) {
        // Decide what type of CREATE is being parsed.
                stmt = createTriggerStmt();
      } else if (jj_2_4(2)) {
        // Decide what type of CREATE is being parsed.
                stmt = createViewStmt();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CREATE:
          stmt = createVirtualTableStmt();
          break;
        case DELETE:
          stmt = deleteStmt();
          break;
        case DETACH:
          stmt = detachStmt();
          break;
        default:
          jj_la1[7] = jj_gen;
          if (jj_2_5(2)) {
            // Decide what type of DROP is being parsed.
                        stmt = dropIndexStmt();
          } else if (jj_2_6(2)) {
            // Decide what type of DROP is being parsed.
                    stmt = dropTableStmt();
          } else if (jj_2_7(2)) {
            // Decide what type of DROP is being parsed.
                    stmt = dropTriggerStmt();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DROP:
              stmt = dropViewStmt();
              break;
            case INSERT:
            case REPLACE:
              stmt = insertStmt();
              break;
            case PRAGMA:
              stmt = pragmaStmt();
              break;
            case REINDEX:
              stmt = reindexStmt();
              break;
            case RELEASE:
              stmt = releaseStmt();
              break;
            case ROLLBACK:
              stmt = rollbackStmt();
              break;
            case SAVEPOINT:
              stmt = savepointStmt();
              break;
            case SELECT:
              stmt = selectStmt();
              break;
            case UPDATE:
              stmt = updateStmt();
              break;
            case VACUUM:
              stmt = vacuumStmt();
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
        if (explain != null) {
            // If statement starts by EXPLAIN.
            stmt.setBegin(line, column);
            stmt.explain = explain;
        }
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public Name name() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return new Name(new Block(token.beginLine, token.beginColumn,
            token.endLine, token.endColumn), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableStmt alterTableStmt() throws ParseException {
    AlterTableStmt stmt;
    int line;
    int column;
    Name database = null;
    Name table;
    jj_consume_token(ALTER);
        line = token.beginLine;
        column = token.beginColumn;
    jj_consume_token(TABLE);
    if (jj_2_8(2)) {
      // Anticipate the occurrence of a dot.
              database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    table = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RENAME:
      stmt = renameTableStmt();
      break;
    case ADD:
      stmt = addColumnStmt();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        stmt.setBeginEnd(line, column, token.endLine, token.endColumn);
        stmt.database = database;
        stmt.table = table;
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableStmt renameTableStmt() throws ParseException {
    RenameTableStmt stmt = new RenameTableStmt();
    jj_consume_token(RENAME);
    jj_consume_token(TO);
    stmt.newTable = name();
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableStmt addColumnStmt() throws ParseException {
    AddColumnStmt stmt = new AddColumnStmt();
    jj_consume_token(ADD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMN:
      jj_consume_token(COLUMN);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    stmt.column = columnDef();
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AnalyzeStmt analyzeStmt() throws ParseException {
    AnalyzeStmt stmt = new AnalyzeStmt();
    jj_consume_token(ANALYZE);
        stmt.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ID:
      stmt.first = name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        stmt.second = name();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AttachStmt attachStmt() throws ParseException {
    AttachStmt stmt = new AttachStmt();
    jj_consume_token(ATTACH);
        stmt.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATABASE:
      jj_consume_token(DATABASE);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    stmt.expr = expr();
    jj_consume_token(AS);
    stmt.database = name();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public BeginStmt beginStmt() throws ParseException {
    BeginStmt stmt = new BeginStmt();
    jj_consume_token(BEGIN);
        stmt.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFERRED:
    case EXCLUSIVE:
    case IMMEDIATE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFERRED:
        jj_consume_token(DEFERRED);
            stmt.type = BeginStmt.Type.DEFERRED;
        break;
      case IMMEDIATE:
        jj_consume_token(IMMEDIATE);
            stmt.type = BeginStmt.Type.IMMEDIATE;
        break;
      case EXCLUSIVE:
        jj_consume_token(EXCLUSIVE);
            stmt.type = BeginStmt.Type.EXCLUSIVE;
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSACTION:
      jj_consume_token(TRANSACTION);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public CommitStmt commitStmt() throws ParseException {
    CommitStmt stmt = new CommitStmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMIT:
      jj_consume_token(COMMIT);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        stmt.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSACTION:
      jj_consume_token(TRANSACTION);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public RollbackStmt rollbackStmt() throws ParseException {
    RollbackStmt stmt = new RollbackStmt();
    jj_consume_token(ROLLBACK);
        stmt.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSACTION:
      jj_consume_token(TRANSACTION);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TO:
      jj_consume_token(TO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SAVEPOINT:
        jj_consume_token(SAVEPOINT);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      stmt.savepoint = name();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public SavepointStmt savepointStmt() throws ParseException {
    SavepointStmt stmt = new SavepointStmt();
    jj_consume_token(SAVEPOINT);
        stmt.setBegin(token.beginLine, token.beginColumn);
    stmt.savepoint = name();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public ReleaseStmt releaseStmt() throws ParseException {
    ReleaseStmt stmt = new ReleaseStmt();
    jj_consume_token(RELEASE);
        stmt.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SAVEPOINT:
      jj_consume_token(SAVEPOINT);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    stmt.savepoint = name();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public CreateIndexStmt createIndexStmt() throws ParseException {
    CreateIndexStmt stmt = new CreateIndexStmt();
    IndexedColumn column;

    stmt.columns = new ArrayList<IndexedColumn>();
    jj_consume_token(CREATE);
        stmt.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIQUE:
      jj_consume_token(UNIQUE);
            stmt.hasUnique = true;
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(INDEX);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
            stmt.hasIfNotExists = true;
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    if (jj_2_9(2)) {
      // Anticipate the occurrence of a dot.
              stmt.database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    stmt.name = name();
    jj_consume_token(ON);
    stmt.table = name();
    jj_consume_token(LP);
    column = indexedColumn();
        stmt.columns.add(column);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      column = indexedColumn();
                stmt.columns.add(column);
    }
    jj_consume_token(RP);
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public IndexedColumn indexedColumn() throws ParseException {
    IndexedColumn column = new IndexedColumn();
    column.column = name();
        column.setBegin(column.column);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLLATE:
      jj_consume_token(COLLATE);
      column.collation = name();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);
            column.order = IndexedColumn.Order.ASC;
        break;
      case DESC:
        jj_consume_token(DESC);
            column.order = IndexedColumn.Order.DESC;
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
        column.setEnd(token.endLine, token.endColumn);
        {if (true) return column;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTableStmt createTableStmt() throws ParseException {
    CreateTableStmt stmt;
    int line;
    int column;
    boolean hasTemporary = false;
    boolean hasIfNotExists = false;
    Name database = null;
    Name table;
    jj_consume_token(CREATE);
        line = token.beginLine;
        column = token.beginColumn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEMP:
    case TEMPORARY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEMP:
        jj_consume_token(TEMP);
        break;
      case TEMPORARY:
        jj_consume_token(TEMPORARY);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            hasTemporary = true;
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(TABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
            hasIfNotExists = true;
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    if (jj_2_10(2)) {
      // Anticipate the occurrence of a dot.
              database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    table = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      stmt = createTableStmtWithColumns();
      break;
    case AS:
      stmt = createTableStmtWithSelect();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        stmt.setBeginEnd(line, column, token.endLine, token.endColumn);
        stmt.hasTemporary = hasTemporary;
        stmt.hasIfNotExists = hasIfNotExists;
        stmt.name = table;
        stmt.database = database;
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTableStmt createTableStmtWithColumns() throws ParseException {
    CreateTableStmtWithColumns stmt = new CreateTableStmtWithColumns();
    ColumnDef column;

    stmt.columns = new ArrayList<ColumnDef>();
    jj_consume_token(LP);
    column = columnDef();
        stmt.columns.add(column);
    label_3:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      column = columnDef();
            stmt.columns.add(column);
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
            if (stmt.constraints == null) {
                stmt.constraints = new ArrayList<TableConstraint>();
            }
            TableConstraint constraint;
      constraint = tableConstraint();
            stmt.constraints.add(constraint);
    }
    jj_consume_token(RP);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTableStmt createTableStmtWithSelect() throws ParseException {
    CreateTableStmtWithSelect stmt = new CreateTableStmtWithSelect();
    jj_consume_token(AS);
    stmt.select = selectStmt();
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnDef columnDef() throws ParseException {
    ColumnDef column = new ColumnDef();
    ColumnConstraint constraint = null;

    column.constraints = new ArrayList<ColumnConstraint>();
    column.column = name();
        column.setBegin(column.column);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ID:
      column.type = typeName();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHECK:
      case COLLATE:
      case CONSTRAINT:
      case DEFAULT_:
      case NOT:
      case PRIMARY:
      case REFERENCES:
      case UNIQUE:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_5;
      }
      constraint = columnConstraint();
            column.constraints.add(constraint);
    }
        column.setEnd(token.endLine, token.endColumn);
        if (constraint == null) {
            column.constraints = null;
        }
        {if (true) return column;}
    throw new Error("Missing return statement in function");
  }

  final public TypeName typeName() throws ParseException {
    TypeName type = new TypeName();
    String name = new String();

    type.name = name;
    name();
        type.setBegin(token.beginLine, token.beginColumn);
        name += token.image;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case ID:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_6;
      }
      name();
            name += " " + token.image;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      type.xDimension = signedNumber();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        type.yDimension = signedNumber();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
        type.setEnd(token.endLine, token.endColumn);
        {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnConstraint columnConstraint() throws ParseException {
    ColumnConstraint constraint;
    int line = 0;
    int column = 0;
    Name name = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRAINT:
      jj_consume_token(CONSTRAINT);
            line = token.beginLine;
            column = token.beginColumn;
      name = name();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY:
      constraint = primaryKeyColumnConstraint();
      break;
    case NOT:
      constraint = notNullColumnConstraint();
      break;
    case UNIQUE:
      constraint = uniqueColumnConstraint();
      break;
    case CHECK:
      constraint = checkColumnConstraint();
      break;
    case DEFAULT_:
      constraint = defaultColumnConstraint();
      break;
    case COLLATE:
      constraint = collateColumnConstraint();
      break;
    case REFERENCES:
      constraint = foreignKeyColumnConstraint();
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (name != null) {
            constraint.setBegin(line, column);
            constraint.name = name;
        }
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryKeyColumnConstraint primaryKeyColumnConstraint() throws ParseException {
    PrimaryKeyColumnConstraint constraint = new PrimaryKeyColumnConstraint();
    jj_consume_token(PRIMARY);
        constraint.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(KEY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);
            constraint.order = PrimaryKeyColumnConstraint.Order.ASC;
        break;
      case DESC:
        jj_consume_token(DESC);
            constraint.order = PrimaryKeyColumnConstraint.Order.DESC;
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    constraint.clause = conflictClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTOINCREMENT:
      jj_consume_token(AUTOINCREMENT);
            constraint.hasAutoincrement = true;
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public NotNullColumnConstraint notNullColumnConstraint() throws ParseException {
    NotNullColumnConstraint constraint = new NotNullColumnConstraint();
    jj_consume_token(NOT);
        constraint.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(NULL);
    constraint.clause = conflictClause();
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public UniqueColumnConstraint uniqueColumnConstraint() throws ParseException {
    UniqueColumnConstraint constraint = new UniqueColumnConstraint();
    jj_consume_token(UNIQUE);
        constraint.setBegin(token.beginLine, token.beginColumn);
    constraint.clause = conflictClause();
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public CheckColumnConstraint checkColumnConstraint() throws ParseException {
    CheckColumnConstraint constraint = new CheckColumnConstraint();
    jj_consume_token(CHECK);
        constraint.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(LP);
    constraint.expr = expr();
    jj_consume_token(RP);
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public DefaultColumnConstraint defaultColumnConstraint() throws ParseException {
    DefaultColumnConstraint constraint = new DefaultColumnConstraint();
    Literal literal;
    jj_consume_token(DEFAULT_);
        constraint.setBegin(token.beginLine, token.beginColumn);
    if (jj_2_12(2147483647)) {
      constraint.expr = signedNumber();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case NULL:
      case NUMERIC:
      case STRING:
      case BLOB:
        literal = literalValue();
            constraint.expr = new LiteralExpr(literal, literal);
        break;
      case LP:
        jj_consume_token(LP);
        constraint.expr = expr();
        jj_consume_token(RP);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public CollateColumnConstraint collateColumnConstraint() throws ParseException {
    CollateColumnConstraint constraint = new CollateColumnConstraint();
    jj_consume_token(COLLATE);
        constraint.setBegin(token.beginLine, token.beginColumn);
    constraint.collation = name();
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public ForeignKeyColumnConstraint foreignKeyColumnConstraint() throws ParseException {
    ForeignKeyColumnConstraint constraint = new ForeignKeyColumnConstraint();
    constraint.clause = foreignKeyClause();
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpr signedNumber() throws ParseException {
    UnaryExpr number = new UnaryExpr();
    NumericLiteral literal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                number.operator = UnaryExpr.Operator.POSITIVE;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                number.operator = UnaryExpr.Operator.NEGATIVE;
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            number.setBegin(token.beginLine, token.beginColumn);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    literal = numericLiteral();
        if (number.operator == null) {
            number.setBeginEnd(literal);
        } else {
            number.setEnd(token.endLine, token.endColumn);
        }
        number.expr = new LiteralExpr(literal, literal);
        {if (true) return number;}
    throw new Error("Missing return statement in function");
  }

  final public TableConstraint tableConstraint() throws ParseException {
    TableConstraint constraint;
    int line = 0;
    int column = 0;
    Name name = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRAINT:
      jj_consume_token(CONSTRAINT);
            line = token.beginLine;
            column = token.beginColumn;
      name = name();
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY:
      constraint = primaryKeyTableConstraint();
      break;
    case CHECK:
      constraint = checkTableConstraint();
      break;
    case FOREIGN:
      constraint = foreignKeyTableConstraint();
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (name != null) {
            constraint.setBegin(line, column);
            constraint.name = name;
        }
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryKeyTableConstraint primaryKeyTableConstraint() throws ParseException {
    PrimaryKeyTableConstraint constraint = new PrimaryKeyTableConstraint();
    IndexedColumn column;

    constraint.columns = new ArrayList<IndexedColumn>();
    jj_consume_token(PRIMARY);
        constraint.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(KEY);
    jj_consume_token(LP);
    column = indexedColumn();
        constraint.columns.add(column);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      column = indexedColumn();
            constraint.columns.add(column);
    }
    jj_consume_token(RP);
    constraint.clause = conflictClause();
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public UniqueTableConstraint uniqueTableConstraint() throws ParseException {
    UniqueTableConstraint constraint = new UniqueTableConstraint();
    IndexedColumn column;

    constraint.columns = new ArrayList<IndexedColumn>();
    jj_consume_token(UNIQUE);
        constraint.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(LP);
    column = indexedColumn();
        constraint.columns.add(column);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      column = indexedColumn();
            constraint.columns.add(column);
    }
    jj_consume_token(RP);
    constraint.clause = conflictClause();
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public CheckTableConstraint checkTableConstraint() throws ParseException {
    CheckTableConstraint constraint = new CheckTableConstraint();
    jj_consume_token(CHECK);
        constraint.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(LP);
    constraint.expr = expr();
    jj_consume_token(RP);
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public ForeignKeyTableConstraint foreignKeyTableConstraint() throws ParseException {
    ForeignKeyTableConstraint constraint = new ForeignKeyTableConstraint();
    Name column;

    constraint.columns = new ArrayList<Name>();
    jj_consume_token(FOREIGN);
        constraint.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(KEY);
    jj_consume_token(LP);
    column = name();
        constraint.columns.add(column);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      column = name();
            constraint.columns.add(column);
    }
    jj_consume_token(RP);
    constraint.clause = foreignKeyClause();
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public ForeignKeyClause foreignKeyClause() throws ParseException {
    ForeignKeyClause clause = new ForeignKeyClause();
    ForeignKeySetting setting = null;

    clause.settings = new ArrayList<ForeignKeySetting>();
    jj_consume_token(REFERENCES);
        clause.setBegin(token.beginLine, token.beginColumn);
    clause.table = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
            Name column;
            clause.columns = new ArrayList<Name>();
      column = name();
            clause.columns.add(column);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        column = name();
                clause.columns.add(column);
      }
      jj_consume_token(RP);
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MATCH:
      case ON:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ON:
        setting = onSetting();
            clause.settings.add(setting);
        break;
      case MATCH:
        setting = matchSetting();
            clause.settings.add(setting);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_13(2)) {
      // Ensures that is deferrable because first token can be 
                           // either NOT or DEFERRABLE.
              setting = deferrableSetting();
            clause.settings.add(setting);
    } else {
      ;
    }
        if (setting == null) {
            clause.settings = null;
        }
        clause.setEnd(token.endLine, token.endColumn);
        {if (true) return clause;}
    throw new Error("Missing return statement in function");
  }

  final public OnSetting onSetting() throws ParseException {
    OnSetting sett = new OnSetting();
    jj_consume_token(ON);
        sett.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
      jj_consume_token(DELETE);
            sett.event = OnSetting.Event.DELETE;
      break;
    case UPDATE:
      jj_consume_token(UPDATE);
            sett.event = OnSetting.Event.UPDATE;
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SET:
      jj_consume_token(SET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
        jj_consume_token(NULL);
                sett.action = OnSetting.Action.SET_NULL;
        break;
      case DEFAULT_:
        jj_consume_token(DEFAULT_);
                sett.action = OnSetting.Action.SET_DEFAULT;
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CASCADE:
      jj_consume_token(CASCADE);
            sett.action = OnSetting.Action.CASCADE;
      break;
    case RESTRICT:
      jj_consume_token(RESTRICT);
            sett.action = OnSetting.Action.RESTRICT;
      break;
    case NO:
      jj_consume_token(NO);
      jj_consume_token(ACTION);
            sett.action = OnSetting.Action.NO_ACTION;
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        sett.setEnd(token.endLine, token.endColumn);
        {if (true) return sett;}
    throw new Error("Missing return statement in function");
  }

  final public MatchSetting matchSetting() throws ParseException {
    MatchSetting sett = new MatchSetting();
    jj_consume_token(MATCH);
        sett.setBegin(token.beginLine, token.beginColumn);
    name();
        sett.name = new Name(new Block(token.beginLine, token.beginColumn, token.endLine,
            token.endColumn), token.image);
        sett.setEnd(token.endLine, token.endColumn);
        {if (true) return sett;}
    throw new Error("Missing return statement in function");
  }

  final public DeferrableSetting deferrableSetting() throws ParseException {
    DeferrableSetting sett = new DeferrableSetting();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
            sett.setBegin(token.beginLine, token.beginColumn);
            sett.type = DeferrableSetting.Type.NOT_DEFERRABLE;
      jj_consume_token(DEFERRABLE);
      break;
    case DEFERRABLE:
      jj_consume_token(DEFERRABLE);
            sett.setBegin(token.beginLine, token.beginColumn);
            sett.type = DeferrableSetting.Type.DEFERRABLE;
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INITIALLY:
      jj_consume_token(INITIALLY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFERRED:
        jj_consume_token(DEFERRED);
                sett.mode = DeferrableSetting.Mode.DEFERRED;
        break;
      case IMMEDIATE:
        jj_consume_token(IMMEDIATE);
                sett.mode = DeferrableSetting.Mode.IMMEDIATE;
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
        sett.setEnd(token.endLine, token.endColumn);
        {if (true) return sett;}
    throw new Error("Missing return statement in function");
  }

  final public ConflictClause conflictClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON:
      jj_consume_token(ON);
            ConflictClause clause = new ConflictClause();
            clause.setBegin(token.beginLine, token.beginColumn);
      jj_consume_token(CONFLICT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROLLBACK:
        jj_consume_token(ROLLBACK);
                clause.action = ConflictClause.Action.ROLLBACK;
        break;
      case ABORT:
        jj_consume_token(ABORT);
                clause.action = ConflictClause.Action.ABORT;
        break;
      case FAIL:
        jj_consume_token(FAIL);
                clause.action = ConflictClause.Action.FAIL;
        break;
      case IGNORE:
        jj_consume_token(IGNORE);
                clause.action = ConflictClause.Action.IGNORE;
        break;
      case REPLACE:
        jj_consume_token(REPLACE);
                clause.action = ConflictClause.Action.REPLACE;
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            clause.setEnd(token.endLine, token.endColumn);
            {if (true) return clause;}
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTriggerStmt createTriggerStmt() throws ParseException {
    CreateTriggerStmt stmt = new CreateTriggerStmt();
    stmt.stmts = new ArrayList<EventStmt>();
    jj_consume_token(CREATE);
        stmt.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEMP:
    case TEMPORARY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEMP:
        jj_consume_token(TEMP);
        break;
      case TEMPORARY:
        jj_consume_token(TEMPORARY);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            stmt.hasTemporary = true;
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    jj_consume_token(TRIGGER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
            stmt.hasIfNotExists = true;
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
    if (jj_2_14(2)) {
      // Anticipate the occurrence of a dot.
              stmt.database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    stmt.name = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AFTER:
    case BEFORE:
    case INSTEAD:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEFORE:
        jj_consume_token(BEFORE);
            stmt.time = CreateTriggerStmt.Time.BEFORE;
        break;
      case AFTER:
        jj_consume_token(AFTER);
            stmt.time = CreateTriggerStmt.Time.AFTER;
        break;
      case INSTEAD:
        jj_consume_token(INSTEAD);
        jj_consume_token(OF);
            stmt.time = CreateTriggerStmt.Time.INSTEAD_OF;
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
      jj_consume_token(DELETE);
            stmt.event = CreateTriggerStmt.Event.DELETE;
      break;
    case INSERT:
      jj_consume_token(INSERT);
            stmt.event = CreateTriggerStmt.Event.INSERT;
      break;
    case UPDATE:
      jj_consume_token(UPDATE);
            stmt.event = CreateTriggerStmt.Event.DELETE;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OF:
        jj_consume_token(OF);
                Name column;
                stmt.columns = new ArrayList<Name>();
        column = name();
                stmt.columns.add(column);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[70] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          column = name();
                    stmt.columns.add(column);
        }
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ON);
    stmt.table = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(EACH);
      jj_consume_token(ROW);
            stmt.hasForEachRow = true;
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN:
      jj_consume_token(WHEN);
      stmt.when = expr();
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
        EventStmt eventStmt;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPDATE:
        eventStmt = updateStmt();
        break;
      case INSERT:
      case REPLACE:
        eventStmt = insertStmt();
        break;
      case DELETE:
        eventStmt = deleteStmt();
        break;
      case SELECT:
        eventStmt = selectStmt();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            stmt.stmts.add(eventStmt);
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case INSERT:
      case REPLACE:
      case SELECT:
      case UPDATE:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_13;
      }
    }
    jj_consume_token(END);
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public CreateViewStmt createViewStmt() throws ParseException {
    CreateViewStmt stmt = new CreateViewStmt();
    jj_consume_token(CREATE);
        stmt.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEMP:
    case TEMPORARY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEMP:
        jj_consume_token(TEMP);
        break;
      case TEMPORARY:
        jj_consume_token(TEMPORARY);
        break;
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            stmt.hasTemporary = true;
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    jj_consume_token(VIEW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
            stmt.hasIfNotExists = true;
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    if (jj_2_15(2)) {
      // Anticipate the occurrence of a dot.
              stmt.database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    stmt.name = name();
    jj_consume_token(AS);
    stmt.select = selectStmt();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public CreateVirtualTableStmt createVirtualTableStmt() throws ParseException {
    CreateVirtualTableStmt stmt = new CreateVirtualTableStmt();
    jj_consume_token(CREATE);
        stmt.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(VIRTUAL);
    jj_consume_token(TABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
            stmt.hasIfNotExists = true;
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    if (jj_2_16(2)) {
      // Anticipate the occurrence of a dot.
              stmt.database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    stmt.name = name();
    jj_consume_token(USING);
    stmt.module = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
            ModuleArgument argument;
            stmt.arguments = new ArrayList<ModuleArgument>();
      argument = moduleArgument();
            stmt.arguments.add(argument);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[81] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        argument = moduleArgument();
                stmt.arguments.add(argument);
      }
      jj_consume_token(RP);
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public ModuleArgument moduleArgument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      other();
      jj_consume_token(RP);
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
        {if (true) return new ModuleArgument(new Block(token.beginLine, token.beginColumn,
            token.endLine, token.endColumn), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public void other() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      other();
      jj_consume_token(RP);
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
  }

  final public DeleteStmt deleteStmt() throws ParseException {
    DeleteStmt stmt = new DeleteStmt();
    jj_consume_token(DELETE);
        stmt.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(FROM);
    stmt.qualifiedTable = qualifiedTableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      stmt.where = expr();
      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
    stmt.constraint = eventConstraint();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public EventConstraint eventConstraint() throws ParseException {
    EventConstraint constraint = new EventConstraint();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      jj_consume_token(ORDER);
            constraint.setBegin(token.beginLine, token.beginColumn);
            OrderingTerm term;

            constraint.terms = new ArrayList<OrderingTerm>();
      jj_consume_token(BY);
      term = orderingTerm();
            constraint.terms.add(term);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[86] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        term = orderingTerm();
                constraint.terms.add(term);
      }
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      jj_consume_token(LIMIT);
            if (constraint.terms == null) {
                constraint.setBegin(token.beginLine, token.beginColumn);
            }
      constraint.limit = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OFFSET:
      case COMMA:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OFFSET:
          jj_consume_token(OFFSET);
          break;
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        constraint.offset = expr();
        break;
      default:
        jj_la1[89] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
        constraint.setEnd(token.endLine, token.endColumn);
        if (constraint.terms == null && constraint.limit == null) {
            {if (true) return null;}
        }
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public DetachStmt detachStmt() throws ParseException {
    DetachStmt stmt = new DetachStmt();
    jj_consume_token(DETACH);
        stmt.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATABASE:
      jj_consume_token(DATABASE);
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
    stmt.database = name();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public DropIndexStmt dropIndexStmt() throws ParseException {
    DropIndexStmt stmt = new DropIndexStmt();
    jj_consume_token(DROP);
        stmt.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(INDEX);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(EXISTS);
            stmt.hasIfExists = true;
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
    if (jj_2_17(2)) {
      // Anticipate the occurrence of a dot.
              stmt.database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    stmt.name = name();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public DropTableStmt dropTableStmt() throws ParseException {
    DropTableStmt stmt = new DropTableStmt();
    jj_consume_token(DROP);
        stmt.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(TABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(EXISTS);
            stmt.hasIfExists = true;
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
    if (jj_2_18(2)) {
      // Anticipate the occurrence of a dot.
              stmt.database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    stmt.name = name();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public DropTriggerStmt dropTriggerStmt() throws ParseException {
    DropTriggerStmt stmt = new DropTriggerStmt();
    jj_consume_token(DROP);
        stmt.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(TRIGGER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(EXISTS);
            stmt.hasIfExists = true;
      break;
    default:
      jj_la1[94] = jj_gen;
      ;
    }
    if (jj_2_19(2)) {
      // Anticipate the occurrence of a dot.
              stmt.database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    stmt.name = name();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public DropViewStmt dropViewStmt() throws ParseException {
    DropViewStmt stmt = new DropViewStmt();
    jj_consume_token(DROP);
        stmt.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(VIEW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(EXISTS);
            stmt.hasIfExists = true;
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    if (jj_2_20(2)) {
      // Anticipate the occurrence of a dot.
              stmt.database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    stmt.name = name();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

// Expression is built by parts recursively to ensure operator precedences are
// to avoid left recursion.
  final public Expression expr() throws ParseException {
    Expression left;
    Expression right;
    left = andExpr();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[96] = jj_gen;
        break label_16;
      }
      jj_consume_token(OR);
      right = andExpr();
            left = new BinaryExpr(new Block(left.beginLine, left.beginColumn, token.endLine,
                token.endColumn), left, right, BinaryExpr.Operator.OR);
    }
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression andExpr() throws ParseException {
    Expression left;
    Expression right;
    left = notExpr();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_17;
      }
      jj_consume_token(AND);
      right = notExpr();
            left = new BinaryExpr(new Block(left.beginLine, left.beginColumn, token.endLine,
                token.endColumn), left, right, BinaryExpr.Operator.AND);
    }
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression notExpr() throws ParseException {
    Expression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
            int line = token.beginLine;
            int column = token.beginColumn;
      expr = notExpr();
            expr = new UnaryExpr(new Block(line, column, token.endLine, token.endColumn),
                UnaryExpr.Operator.LOGICAL_NOT, expr);
      break;
    case CASE:
    case CAST:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case NULL:
    case RAISE:
    case PLUS:
    case MINUS:
    case BIT_NOT:
    case NUMERIC:
    case STRING:
    case BLOB:
    case PARAMETER:
    case ID:
    case LP:
      expr = equalityExpr();
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression equalityExpr() throws ParseException {
    Expression expr;
    expr = relationalExpr();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BETWEEN:
      case GLOB:
      case IN:
      case IS:
      case ISNULL:
      case LIKE:
      case MATCH:
      case NOT:
      case NOTNULL:
      case REGEXP:
      case EQUAL_1:
      case EQUAL_2:
      case NOT_EQUAL_1:
      case NOT_EQUAL_2:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_18;
      }
      if (jj_2_21(2)) {
        expr = unaryEqualityExpr(expr);
      } else if (jj_2_22(2)) {
        expr = betweenExpr(expr);
      } else if (jj_2_23(2)) {
        expr = inExpr(expr);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GLOB:
        case IS:
        case LIKE:
        case MATCH:
        case NOT:
        case REGEXP:
        case EQUAL_1:
        case EQUAL_2:
        case NOT_EQUAL_1:
        case NOT_EQUAL_2:
          expr = binaryEqualityExpr(expr);
          break;
        default:
          jj_la1[100] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression unaryEqualityExpr(Expression expr) throws ParseException {
    UnaryExpr.Operator operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ISNULL:
      jj_consume_token(ISNULL);
            operator = UnaryExpr.Operator.IS_NULL;
      break;
    case NOTNULL:
      jj_consume_token(NOTNULL);
            operator = UnaryExpr.Operator.NOT_NULL;
      break;
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(NULL);
            operator = UnaryExpr.Operator.NOT_NULL;
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return new UnaryExpr(new Block(expr.beginLine, expr.beginColumn, token.endLine,
            token.endColumn), operator, expr);}
    throw new Error("Missing return statement in function");
  }

  final public Expression binaryEqualityExpr(Expression left) throws ParseException {
    Expression right;
    BinaryExpr.Operator operator;
    operator = binaryEqualityOperator();
    right = relationalExpr();
        {if (true) return new BinaryExpr(new Block(left.beginLine, left.beginColumn, token.endLine,
            token.endColumn), left, right, operator);}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExpr.Operator binaryEqualityOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL_1:
      jj_consume_token(EQUAL_1);
        {if (true) return BinaryExpr.Operator.EQUAL;}
      break;
    case EQUAL_2:
      jj_consume_token(EQUAL_2);
        {if (true) return BinaryExpr.Operator.EQUAL;}
      break;
    case NOT_EQUAL_1:
      jj_consume_token(NOT_EQUAL_1);
        {if (true) return BinaryExpr.Operator.NOT_EQUAL;}
      break;
    case NOT_EQUAL_2:
      jj_consume_token(NOT_EQUAL_2);
        {if (true) return BinaryExpr.Operator.NOT_EQUAL;}
      break;
    case IS:
      jj_consume_token(IS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
            {if (true) return BinaryExpr.Operator.IS_NOT;}
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
        {if (true) return BinaryExpr.Operator.IS;}
      break;
    case NOT:
      jj_consume_token(NOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIKE:
        jj_consume_token(LIKE);
            {if (true) return BinaryExpr.Operator.NOT_LIKE;}
        break;
      case GLOB:
        jj_consume_token(GLOB);
            {if (true) return BinaryExpr.Operator.NOT_GLOB;}
        break;
      case REGEXP:
        jj_consume_token(REGEXP);
            {if (true) return BinaryExpr.Operator.NOT_REGEXP;}
        break;
      case MATCH:
        jj_consume_token(MATCH);
            {if (true) return BinaryExpr.Operator.NOT_MATCH;}
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LIKE:
      jj_consume_token(LIKE);
        {if (true) return BinaryExpr.Operator.LIKE;}
      break;
    case GLOB:
      jj_consume_token(GLOB);
        {if (true) return BinaryExpr.Operator.GLOB;}
      break;
    case REGEXP:
      jj_consume_token(REGEXP);
        {if (true) return BinaryExpr.Operator.REGEXP;}
      break;
    case MATCH:
      jj_consume_token(MATCH);
        {if (true) return BinaryExpr.Operator.MATCH;}
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BetweenExpr betweenExpr(Expression expr) throws ParseException {
    BetweenExpr between = new BetweenExpr();

    between.expr = expr;
    between.setBegin(expr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(BETWEEN);
            between.operator = BetweenExpr.Operator.NOT_BETWEEN;
      break;
    case BETWEEN:
      jj_consume_token(BETWEEN);
            between.operator = BetweenExpr.Operator.BETWEEN;
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    between.lower = relationalExpr();
    jj_consume_token(AND);
    between.upper = relationalExpr();
        between.setEnd(token.endLine, token.endColumn);
        {if (true) return between;}
    throw new Error("Missing return statement in function");
  }

  final public InExpr inExpr(Expression expr) throws ParseException {
    InExpr in = null;
    InExpr.Operator operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(IN);
            operator = InExpr.Operator.NOT_IN;
      break;
    case IN:
      jj_consume_token(IN);
            operator = InExpr.Operator.IN;
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        in = inSelectExpr();
        break;
      default:
        jj_la1[107] = jj_gen;
        in = inSetExpr();
      }
      jj_consume_token(RP);
      break;
    case STRING:
    case ID:
      in = inTableExpr();
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        in.expr = expr;
        in.operator = operator;
        in.setBegin(expr);
        in.setEnd(token.endLine, token.endColumn);
        {if (true) return in;}
    throw new Error("Missing return statement in function");
  }

  final public InSelectExpr inSelectExpr() throws ParseException {
    InSelectExpr in = new InSelectExpr();
    in.select = selectStmt();
        {if (true) return in;}
    throw new Error("Missing return statement in function");
  }

  final public InSetExpr inSetExpr() throws ParseException {
    InSetExpr in = new InSetExpr();
    Expression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case CAST:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case NOT:
    case NULL:
    case RAISE:
    case PLUS:
    case MINUS:
    case BIT_NOT:
    case NUMERIC:
    case STRING:
    case BLOB:
    case PARAMETER:
    case ID:
    case LP:
      expr = expr();
                in.set = new ArrayList<Expression>();
                in.set.add(expr);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[109] = jj_gen;
          break label_19;
        }
        jj_consume_token(COMMA);
        expr = expr();
                    in.set.add(expr);
      }
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
        {if (true) return in;}
    throw new Error("Missing return statement in function");
  }

  final public InTableExpr inTableExpr() throws ParseException {
    InTableExpr in = new InTableExpr();
    if (jj_2_24(2)) {
      // Anticipate the occurrence of a dot.
              in.database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    in.table = name();
        {if (true) return in;}
    throw new Error("Missing return statement in function");
  }

  final public Expression relationalExpr() throws ParseException {
    Expression left;
    Expression right;
    BinaryExpr.Operator operator;
    left = escapeExpr();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
      case LESS_OR_EQUAL:
      case GREATER:
      case GREATER_OR_EQUAL:
        ;
        break;
      default:
        jj_la1[111] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        jj_consume_token(LESS);
                operator = BinaryExpr.Operator.LESS;
        break;
      case LESS_OR_EQUAL:
        jj_consume_token(LESS_OR_EQUAL);
                operator = BinaryExpr.Operator.LESS_OR_EQUAL;
        break;
      case GREATER:
        jj_consume_token(GREATER);
                operator = BinaryExpr.Operator.GREATER;
        break;
      case GREATER_OR_EQUAL:
        jj_consume_token(GREATER_OR_EQUAL);
                operator = BinaryExpr.Operator.GREATER_OR_EQUAL;
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = escapeExpr();
            left = new BinaryExpr(new Block(left.beginLine, left.beginColumn, token.endLine,
                token.endColumn), left, right, operator);
    }
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression escapeExpr() throws ParseException {
    Expression left;
    Expression right;
    left = bitwiseExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESCAPE:
      jj_consume_token(ESCAPE);
      right = bitwiseExpr();
            left = new BinaryExpr(new Block(left.beginLine, left.beginColumn, token.endLine,
                token.endColumn), left, right, BinaryExpr.Operator.ESCAPE);
      break;
    default:
      jj_la1[113] = jj_gen;
      ;
    }
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression bitwiseExpr() throws ParseException {
    Expression left;
    Expression right;
    BinaryExpr.Operator operator;
    left = additiveExpr();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHIFT_HIGH:
      case SHIFT_LOW:
      case BIT_AND:
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[114] = jj_gen;
        break label_21;
      }
      operator = bitwiseOperator();
      right = additiveExpr();
            left = new BinaryExpr(new Block(left.beginLine, left.beginColumn, token.endLine,
                token.endColumn), left, right, operator);
    }
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExpr.Operator bitwiseOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHIFT_LOW:
      jj_consume_token(SHIFT_LOW);
        {if (true) return BinaryExpr.Operator.SHIFT_HIGH;}
      break;
    case SHIFT_HIGH:
      jj_consume_token(SHIFT_HIGH);
        {if (true) return BinaryExpr.Operator.SHIFT_LOW;}
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
        {if (true) return BinaryExpr.Operator.BIT_AND;}
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
        {if (true) return BinaryExpr.Operator.BIT_OR;}
      break;
    default:
      jj_la1[115] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression additiveExpr() throws ParseException {
    Expression left;
    Expression right;
    BinaryExpr.Operator operator;
    left = multiplicativeExpr();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                operator = BinaryExpr.Operator.ADDITION;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                operator = BinaryExpr.Operator.SUBTRACTION;
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = multiplicativeExpr();
            left = new BinaryExpr(new Block(left.beginLine, left.beginColumn, token.endLine,
                token.endColumn), left, right, operator);
    }
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression multiplicativeExpr() throws ParseException {
    Expression left;
    Expression right;
    BinaryExpr.Operator operator;
    left = concatenateExpr();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case MODULO:
        ;
        break;
      default:
        jj_la1[118] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                operator = BinaryExpr.Operator.MULTIPLICATION;
        break;
      case SLASH:
        jj_consume_token(SLASH);
                operator = BinaryExpr.Operator.DIVISION;
        break;
      case MODULO:
        jj_consume_token(MODULO);
                operator = BinaryExpr.Operator.MODULO;
        break;
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = concatenateExpr();
            left = new BinaryExpr(new Block(left.beginLine, left.beginColumn, token.endLine,
                token.endColumn), left, right, operator);
    }
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression concatenateExpr() throws ParseException {
    Expression left;
    Expression right;
    left = collateExpr();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCATENATION:
        ;
        break;
      default:
        jj_la1[120] = jj_gen;
        break label_24;
      }
      jj_consume_token(CONCATENATION);
      right = collateExpr();
            left = new BinaryExpr(new Block(left.beginLine, left.beginColumn, token.endLine,
                token.endColumn), left, right, BinaryExpr.Operator.CONCATENATION);
    }
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression collateExpr() throws ParseException {
    Expression expr;
    Name collation;
    expr = unaryExpr();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLLATE:
        ;
        break;
      default:
        jj_la1[121] = jj_gen;
        break label_25;
      }
      jj_consume_token(COLLATE);
      collation = name();
            expr = new CollateExpr(new Block(expr.beginLine, expr.beginColumn, token.endLine,
                token.endColumn), expr, collation);
    }
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression unaryExpr() throws ParseException {
    Expression expr;
    UnaryExpr.Operator operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case BIT_NOT:
      operator = unaryOperator();
                int line = token.beginLine;
                int column = token.beginColumn;
      expr = unaryExpr();
            expr = new UnaryExpr(new Block(line, column, token.endLine, token.endColumn), operator,
                expr);
      break;
    case CASE:
    case CAST:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case NULL:
    case RAISE:
    case NUMERIC:
    case STRING:
    case BLOB:
    case PARAMETER:
    case ID:
    case LP:
      expr = terminalExpr();
      break;
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpr.Operator unaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
        {if (true) return UnaryExpr.Operator.NEGATIVE;}
      break;
    case PLUS:
      jj_consume_token(PLUS);
        {if (true) return UnaryExpr.Operator.POSITIVE;}
      break;
    case BIT_NOT:
      jj_consume_token(BIT_NOT);
        {if (true) return UnaryExpr.Operator.BIT_NOT;}
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression terminalExpr() throws ParseException {
    Expression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAMETER:
      expr = bindParameterExpr();
      break;
    default:
      jj_la1[124] = jj_gen;
      if (jj_2_25(2)) {
        // columnExpr also starts with a name.
                expr = functionExpr();
      } else if (jj_2_26(2)) {
        // literalExpr may also start with a <STRING>.
                expr = columnExpr();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CURRENT_DATE:
        case CURRENT_TIME:
        case CURRENT_TIMESTAMP:
        case NULL:
        case NUMERIC:
        case STRING:
        case BLOB:
          expr = literalExpr();
          break;
        case CAST:
          expr = castExpr();
          break;
        case EXISTS:
          expr = existsExpr();
          break;
        default:
          jj_la1[125] = jj_gen;
          if (jj_2_27(2)) {
            jj_consume_token(LP);
            expr = expr();
            jj_consume_token(RP);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LP:
              expr = selectExpr();
              break;
            case CASE:
              expr = caseExpr();
              break;
            case RAISE:
              expr = raiseFunctionExpr();
              break;
            default:
              jj_la1[126] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public LiteralExpr literalExpr() throws ParseException {
    Literal literal;
    literal = literalValue();
        {if (true) return new LiteralExpr(new Block(literal), literal);}
    throw new Error("Missing return statement in function");
  }

  final public BindParameterExpr bindParameterExpr() throws ParseException {
    jj_consume_token(PARAMETER);
        {if (true) return new BindParameterExpr(new Block(token.beginLine, token.beginColumn, token.endLine,
            token.endColumn), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionExpr functionExpr() throws ParseException {
    FunctionExpr function = new FunctionExpr();
    Expression expr;
    function.function = name();
        function.setBegin(function.function);
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case CAST:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case DISTINCT:
    case EXISTS:
    case NOT:
    case NULL:
    case RAISE:
    case STAR:
    case PLUS:
    case MINUS:
    case BIT_NOT:
    case NUMERIC:
    case STRING:
    case BLOB:
    case PARAMETER:
    case ID:
    case LP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
            function.operator = FunctionExpr.Operator.UNIVERSAL;
        break;
      case CASE:
      case CAST:
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case DISTINCT:
      case EXISTS:
      case NOT:
      case NULL:
      case RAISE:
      case PLUS:
      case MINUS:
      case BIT_NOT:
      case NUMERIC:
      case STRING:
      case BLOB:
      case PARAMETER:
      case ID:
      case LP:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DISTINCT:
          jj_consume_token(DISTINCT);
                function.operator = FunctionExpr.Operator.DISTINCT;
          break;
        default:
          jj_la1[127] = jj_gen;
          ;
        }
        expr = expr();
            function.exprs = new ArrayList<Expression>();
            function.exprs.add(expr);
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[128] = jj_gen;
            break label_26;
          }
          jj_consume_token(COMMA);
          expr = expr();
                function.exprs.add(expr);
        }
        break;
      default:
        jj_la1[129] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[130] = jj_gen;
      ;
    }
    jj_consume_token(RP);
        function.setEnd(token.endLine, token.endColumn);
        {if (true) return function;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnExpr columnExpr() throws ParseException {
    ColumnExpr reference = new ColumnExpr();
    if (jj_2_29(2)) {
      if (jj_2_28(4)) {
        // Anticipate the occurrence of a dot.
                    reference.database = name();
                reference.setBegin(reference.database);
        jj_consume_token(DOT);
      } else {
        ;
      }
      reference.table = name();
            if (reference.database == null) {
                reference.setBegin(reference.table);
            }
      jj_consume_token(DOT);
      reference.column = name();
                {if (true) return reference;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
            // In case ColumnExpr only has the column name, that can't be a
            // <STRING> because would exist a syntactic conflict with a string
            // literal.
            reference.column = new Name(new Block(token.beginLine, token.beginColumn, token.endLine,
                token.endColumn), token.image);
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        reference.setEnd(token.endLine, token.endColumn);
        {if (true) return reference;}
    throw new Error("Missing return statement in function");
  }

  final public CastExpr castExpr() throws ParseException {
    CastExpr cast = new CastExpr();
    jj_consume_token(CAST);
        cast.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(LP);
    cast.expr = expr();
    jj_consume_token(AS);
    cast.type = typeName();
    jj_consume_token(RP);
        cast.setEnd(token.endLine, token.endColumn);
        {if (true) return cast;}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpr existsExpr() throws ParseException {
    UnaryExpr exists = new UnaryExpr();
    jj_consume_token(EXISTS);
        exists.setBegin(token.beginLine, token.beginColumn);
    exists.expr = selectExpr();
        exists.operator = UnaryExpr.Operator.EXISTS;
        exists.setEnd(token.endLine, token.endColumn);
        {if (true) return exists;}
    throw new Error("Missing return statement in function");
  }

  final public SelectExpr selectExpr() throws ParseException {
    SelectExpr expr = new SelectExpr();
    jj_consume_token(LP);
        expr.setBegin(token.beginLine, token.beginColumn);
    expr.select = selectStmt();
    jj_consume_token(RP);
        expr.setEnd(token.endLine, token.endColumn);
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public CaseExpr caseExpr() throws ParseException {
    CaseExpr caseExpr = new CaseExpr();
    WhenExpr expr;

    caseExpr.whens = new ArrayList<WhenExpr>();
    jj_consume_token(CASE);
        caseExpr.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case CAST:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case NOT:
    case NULL:
    case RAISE:
    case PLUS:
    case MINUS:
    case BIT_NOT:
    case NUMERIC:
    case STRING:
    case BLOB:
    case PARAMETER:
    case ID:
    case LP:
      caseExpr.caseExpr = expr();
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
    label_27:
    while (true) {
      expr = whenExpr();
            caseExpr.whens.add(expr);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        ;
        break;
      default:
        jj_la1[133] = jj_gen;
        break label_27;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      caseExpr.elseExpr = expr();
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    jj_consume_token(END);
        caseExpr.setEnd(token.endLine, token.endColumn);
        {if (true) return caseExpr;}
    throw new Error("Missing return statement in function");
  }

  final public WhenExpr whenExpr() throws ParseException {
    WhenExpr when = new WhenExpr();
    jj_consume_token(WHEN);
        when.setBegin(token.beginLine, token.beginColumn);
    when.when = expr();
    jj_consume_token(THEN);
    when.then = expr();
        when.setEnd(token.endLine, token.endColumn);
        {if (true) return when;}
    throw new Error("Missing return statement in function");
  }

  final public RaiseFunctionExpr raiseFunctionExpr() throws ParseException {
    RaiseFunctionExpr expr = new RaiseFunctionExpr();
    jj_consume_token(RAISE);
        expr.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGNORE:
      jj_consume_token(IGNORE);
            expr.type = RaiseFunctionExpr.Type.IGNORE;
      break;
    case ABORT:
    case FAIL:
    case ROLLBACK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROLLBACK:
        jj_consume_token(ROLLBACK);
                expr.type = RaiseFunctionExpr.Type.ROLLBACK;
        break;
      case ABORT:
        jj_consume_token(ABORT);
                expr.type = RaiseFunctionExpr.Type.ABORT;
        break;
      case FAIL:
        jj_consume_token(FAIL);
                expr.type = RaiseFunctionExpr.Type.FAIL;
        break;
      default:
        jj_la1[135] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      default:
        jj_la1[136] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            expr.error = token.image;
      break;
    default:
      jj_la1[137] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RP);
        expr.setEnd(token.endLine, token.endColumn);
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Literal literalValue() throws ParseException {
    Literal literal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERIC:
      literal = numericLiteral();
      break;
    case STRING:
      literal = stringLiteral();
      break;
    case BLOB:
      literal = blobLiteral();
      break;
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case NULL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
        jj_consume_token(NULL);
        break;
      case CURRENT_TIME:
        jj_consume_token(CURRENT_TIME);
        break;
      case CURRENT_DATE:
        jj_consume_token(CURRENT_DATE);
        break;
      case CURRENT_TIMESTAMP:
        jj_consume_token(CURRENT_TIMESTAMP);
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            literal = new Literal(new Block(token.beginLine, token.beginColumn, token.endLine,
                token.endColumn), token.image);
      break;
    default:
      jj_la1[139] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  final public NumericLiteral numericLiteral() throws ParseException {
    jj_consume_token(NUMERIC);
        {if (true) return new NumericLiteral(new Block(token.beginLine, token.beginColumn, token.endLine,
            token.endColumn), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public StringLiteral stringLiteral() throws ParseException {
    jj_consume_token(STRING);
        {if (true) return new StringLiteral(new Block(token.beginLine, token.beginColumn, token.endLine,
            token.endColumn), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public BlobLiteral blobLiteral() throws ParseException {
    jj_consume_token(BLOB);
        {if (true) return new BlobLiteral(new Block(token.beginLine, token.beginColumn, token.endLine,
            token.endColumn), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public InsertStmt insertStmt() throws ParseException {
    InsertStmt stmt = new InsertStmtDefault();
    List<Name> columns = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSERT:
      jj_consume_token(INSERT);
            stmt.setBegin(token.beginLine, token.beginColumn);
            stmt.type = InsertStmt.Type.INSERT;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ROLLBACK:
          jj_consume_token(ROLLBACK);
                    stmt.type = InsertStmt.Type.INSERT_OR_ROLLBACK;
          break;
        case ABORT:
          jj_consume_token(ABORT);
                    stmt.type = InsertStmt.Type.INSERT_OR_ABORT;
          break;
        case REPLACE:
          jj_consume_token(REPLACE);
                    stmt.type = InsertStmt.Type.INSERT_OR_REPLACE;
          break;
        case FAIL:
          jj_consume_token(FAIL);
                    stmt.type = InsertStmt.Type.INSERT_OR_FAIL;
          break;
        case IGNORE:
          jj_consume_token(IGNORE);
                    stmt.type = InsertStmt.Type.INSERT_OR_IGNORE;
          break;
        default:
          jj_la1[140] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[141] = jj_gen;
        ;
      }
      break;
    case REPLACE:
      jj_consume_token(REPLACE);
            stmt.setBegin(token.beginLine, token.beginColumn);
            stmt.type = InsertStmt.Type.REPLACE;
      break;
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(INTO);
    if (jj_2_30(2)) {
      // Anticipate the occurrence of a dot.
              stmt.database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    stmt.table = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULT_:
      jj_consume_token(DEFAULT_);
      jj_consume_token(VALUES);
      break;
    case SELECT:
    case VALUES:
    case LP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LP:
        jj_consume_token(LP);
                Name column;
                columns = new ArrayList<Name>();
        column = name();
                columns.add(column);
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[143] = jj_gen;
            break label_28;
          }
          jj_consume_token(COMMA);
          column = name();
                        columns.add(column);
        }
        jj_consume_token(RP);
        break;
      default:
        jj_la1[144] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUES:
        stmt = insertStmtWithValues(stmt, columns);
        break;
      case SELECT:
        stmt = insertStmtWithSelect(stmt, columns);
        break;
      default:
        jj_la1[145] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[146] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public InsertStmt insertStmtWithValues(InsertStmt stmt, List<Name> columns) throws ParseException {
    InsertStmtWithValues stmtWValues = new InsertStmtWithValues(stmt);
    List<Expression> list = new ArrayList<Expression>();
    Expression expr;

    stmtWValues.columns = columns;
    jj_consume_token(VALUES);
    jj_consume_token(LP);
    expr = expr();
        list.add(expr);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[147] = jj_gen;
        break label_29;
      }
      jj_consume_token(COMMA);
      expr = expr();
                list.add(expr);
    }
    jj_consume_token(RP);
        stmtWValues.rows.add(list);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[148] = jj_gen;
        break label_30;
      }
      jj_consume_token(COMMA);
            list = new ArrayList<Expression>();
      jj_consume_token(LP);
      expr = expr();
                list.add(expr);
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[149] = jj_gen;
          break label_31;
        }
        jj_consume_token(COMMA);
        expr = expr();
                    list.add(expr);
      }
      jj_consume_token(RP);
            stmtWValues.rows.add(list);
    }
        {if (true) return stmtWValues;}
    throw new Error("Missing return statement in function");
  }

  final public InsertStmt insertStmtWithSelect(InsertStmt stmt, List<Name> columns) throws ParseException {
    InsertStmtWithSelect stmtWSelect = new InsertStmtWithSelect(stmt);

    stmtWSelect.columns = columns;
    stmtWSelect.select = selectStmt();
        {if (true) return stmtWSelect;}
    throw new Error("Missing return statement in function");
  }

  final public PragmaStmt pragmaStmt() throws ParseException {
    PragmaStmt stmt = new PragmaStmt();
    jj_consume_token(PRAGMA);
        stmt.setBegin(token.beginLine, token.beginColumn);
    if (jj_2_31(2)) {
      // Anticipate the occurrence of a dot.
              stmt.database = name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    stmt.pragma = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL_1:
    case LP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_1:
        jj_consume_token(EQUAL_1);
        stmt.value = pragmaValue();
        break;
      case LP:
        jj_consume_token(LP);
        stmt.value = pragmaValue();
        jj_consume_token(RP);
        break;
      default:
        jj_la1[150] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[151] = jj_gen;
      ;
    }
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public PragmaValue pragmaValue() throws ParseException {
    UnaryExpr expr;
    StringLiteral literal;
    Name name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case NUMERIC:
      expr = signedNumber();
            {if (true) return new PragmaNumber(expr, expr);}
      break;
    default:
      jj_la1[152] = jj_gen;
      if (jj_2_32(2147483647)) {
        // name() that also can match <STRING>
                literal = stringLiteral();
            {if (true) return new PragmaString(literal, literal);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
        case ID:
          name = name();
            {if (true) return new PragmaName(name, name);}
          break;
        default:
          jj_la1[153] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ReindexStmt reindexStmt() throws ParseException {
    ReindexStmt stmt = new ReindexStmt();
    jj_consume_token(REINDEX);
        stmt.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ID:
      stmt.first = name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        stmt.second = name();
        break;
      default:
        jj_la1[154] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[155] = jj_gen;
      ;
    }
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public SelectStmt selectStmt() throws ParseException {
    SelectStmt stmt = new SelectStmt();
    SelectCompound.Operator operator;
    SelectUnit core;
    stmt.unit = selectCore();
        stmt.setBegin(stmt.unit);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXCEPT:
      case INTERSECT:
      case UNION:
        ;
        break;
      default:
        jj_la1[156] = jj_gen;
        break label_32;
      }
      operator = compoundOperator();
      core = selectCore();
            stmt.unit = new SelectCompound(new Block(stmt.unit.beginLine, stmt.unit.beginColumn,
                token.endLine, token.endColumn), stmt.unit, operator, core);
    }

    stmt.constraint = eventConstraint();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public SelectCore selectCore() throws ParseException {
    SelectCore core = new SelectCore();
    ResultColumn column;

    core.columns = new ArrayList<ResultColumn>();
    jj_consume_token(SELECT);
        core.setBegin(token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        jj_consume_token(DISTINCT);
            core.hasDistinct = true;
        break;
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[157] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[158] = jj_gen;
      ;
    }
    column = resultColumn();
        core.columns.add(column);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[159] = jj_gen;
        break label_33;
      }
      jj_consume_token(COMMA);
      resultColumn();
                core.columns.add(column);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      jj_consume_token(FROM);
      core.from = joinSource();
      break;
    default:
      jj_la1[160] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      core.where = expr();
      break;
    default:
      jj_la1[161] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP:
      jj_consume_token(GROUP);
      jj_consume_token(BY);
            Expression expr;

            core.groupBy = new ArrayList<Expression>();
      expr = expr();
            core.groupBy.add(expr);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[162] = jj_gen;
          break label_34;
        }
        jj_consume_token(COMMA);
        expr = expr();
                core.groupBy.add(expr);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAVING:
        jj_consume_token(HAVING);
        core.having = expr();
        break;
      default:
        jj_la1[163] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[164] = jj_gen;
      ;
    }
        core.setEnd(token.endLine, token.endColumn);
        {if (true) return core;}
    throw new Error("Missing return statement in function");
  }

  final public ResultColumn resultColumn() throws ParseException {
    ResultColumn column;
    if (jj_2_33(3)) {
      // Removes ambiguity between "table.*" and "table.column".
              column = universalColumn();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case CAST:
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case EXISTS:
      case NOT:
      case NULL:
      case RAISE:
      case PLUS:
      case MINUS:
      case BIT_NOT:
      case NUMERIC:
      case STRING:
      case BLOB:
      case PARAMETER:
      case ID:
      case LP:
        column = expressionColumn();
        break;
      default:
        jj_la1[165] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return column;}
    throw new Error("Missing return statement in function");
  }

  final public UniversalColumn universalColumn() throws ParseException {
    UniversalColumn column = new UniversalColumn();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
            column.setBeginEnd(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
      break;
    case STRING:
    case ID:
      column.table = name();
      jj_consume_token(DOT);
      jj_consume_token(STAR);
            column.setBeginEnd(column.table.beginLine, column.table.beginColumn, token.endLine,
                token.endColumn);
      break;
    default:
      jj_la1[166] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return column;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionColumn expressionColumn() throws ParseException {
    ExpressionColumn column = null;
    Expression expr;
    expr = expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case STRING:
    case ID:
      column = aliasedColumn();
      break;
    default:
      jj_la1[167] = jj_gen;
      ;
    }
        if (column == null) {
            column = new ExpressionColumn();
        }
        column.expr = expr;
        column.setBeginEnd(expr.beginLine, expr.beginColumn, token.endLine, token.endColumn);
        {if (true) return column;}
    throw new Error("Missing return statement in function");
  }

  final public AliasedColumn aliasedColumn() throws ParseException {
    AliasedColumn column = new AliasedColumn();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      break;
    default:
      jj_la1[168] = jj_gen;
      ;
    }
    column.alias = name();
            {if (true) return column;}
    throw new Error("Missing return statement in function");
  }

  final public JoinSrc joinSource() throws ParseException {
    JoinSrc src;
    JoinCompound.Operator operator;
    JoinSrc right;
    JoinConstraint constraint;
    src = singleSource();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CROSS:
      case INNER:
      case JOIN:
      case LEFT:
      case NATURAL:
      case COMMA:
        ;
        break;
      default:
        jj_la1[169] = jj_gen;
        break label_35;
      }
      operator = joinOp();
      right = singleSource();
      constraint = joinConstraint();
            src = new JoinCompound(new Block(src.beginLine, src.beginColumn, token.endLine,
                token.endColumn), src, operator, right, constraint);
    }
        {if (true) return src;}
    throw new Error("Missing return statement in function");
  }

  final public JoinSrc singleSource() throws ParseException {
    JoinSrc src;
    int line = 0;
    int column = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ID:
      src = tableSource();
      break;
    default:
      jj_la1[170] = jj_gen;
      if (jj_2_34(2)) {
        src = selectSource();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LP:
          jj_consume_token(LP);
            line = token.beginLine;
            column = token.beginColumn;
          src = joinSource();
          jj_consume_token(RP);
            src.setBeginEnd(line, column, token.endLine, token.endColumn);
          break;
        default:
          jj_la1[171] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
        {if (true) return src;}
    throw new Error("Missing return statement in function");
  }

  final public TableSrc tableSource() throws ParseException {
    TableSrc src = new TableSrc();
    if (jj_2_35(2)) {
      // Anticipate the occurrence of a dot.
              src.database = name();
            src.setBegin(src.database);
      jj_consume_token(DOT);
    } else {
      ;
    }
    src.table = name();
        if (src.database == null) {
            src.setBegin(src.table);
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case STRING:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[172] = jj_gen;
        ;
      }
      src.alias = name();
      break;
    default:
      jj_la1[173] = jj_gen;
      ;
    }
    src.indexedBy = indexedBy();
        src.setEnd(token.endLine, token.endColumn);
        {if (true) return src;}
    throw new Error("Missing return statement in function");
  }

  final public SelectSrc selectSource() throws ParseException {
    SelectSrc src = new SelectSrc();
    jj_consume_token(LP);
        src.setBegin(token.beginLine, token.beginColumn);
    src.select = selectStmt();
    jj_consume_token(RP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case STRING:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[174] = jj_gen;
        ;
      }
      src.alias = name();
      break;
    default:
      jj_la1[175] = jj_gen;
      ;
    }
        src.setEnd(token.endLine, token.endColumn);
        {if (true) return src;}
    throw new Error("Missing return statement in function");
  }

  final public JoinCompound.Operator joinOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
        {if (true) return JoinCompound.Operator.COMMA;}
      break;
    case NATURAL:
      jj_consume_token(NATURAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
        jj_consume_token(LEFT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUTER:
          jj_consume_token(OUTER);
          jj_consume_token(JOIN);
                    {if (true) return JoinCompound.Operator.NATURAL_LEFT_OUTER_JOIN;}
          break;
        case JOIN:
          jj_consume_token(JOIN);
                    {if (true) return JoinCompound.Operator.NATURAL_LEFT_JOIN;}
          break;
        default:
          jj_la1[176] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case INNER:
        jj_consume_token(INNER);
        jj_consume_token(JOIN);
            {if (true) return JoinCompound.Operator.NATURAL_INNER_JOIN;}
        break;
      case CROSS:
        jj_consume_token(CROSS);
        jj_consume_token(JOIN);
            {if (true) return JoinCompound.Operator.NATURAL_CROSS_JOIN;}
        break;
      case JOIN:
        jj_consume_token(JOIN);
            {if (true) return JoinCompound.Operator.NATURAL_JOIN;}
        break;
      default:
        jj_la1[177] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LEFT:
      jj_consume_token(LEFT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTER:
        jj_consume_token(OUTER);
        jj_consume_token(JOIN);
            {if (true) return JoinCompound.Operator.LEFT_OUTER_JOIN;}
        break;
      case JOIN:
        jj_consume_token(JOIN);
            {if (true) return JoinCompound.Operator.LEFT_JOIN;}
        break;
      default:
        jj_la1[178] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case INNER:
      jj_consume_token(INNER);
      jj_consume_token(JOIN);
        {if (true) return JoinCompound.Operator.INNER_JOIN;}
      break;
    case CROSS:
      jj_consume_token(CROSS);
      jj_consume_token(JOIN);
        {if (true) return JoinCompound.Operator.CROSS_JOIN;}
      break;
    case JOIN:
      jj_consume_token(JOIN);
        {if (true) return JoinCompound.Operator.JOIN;}
      break;
    default:
      jj_la1[179] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public JoinConstraint joinConstraint() throws ParseException {
    JoinConstraint constraint = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON:
    case USING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ON:
        constraint = joinConstraintOn();
        break;
      case USING:
        constraint = joinConstraintUsing();
        break;
      default:
        jj_la1[180] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[181] = jj_gen;
      ;
    }
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public JoinConstraintOn joinConstraintOn() throws ParseException {
    JoinConstraintOn constraint = new JoinConstraintOn();
    jj_consume_token(ON);
        constraint.setBegin(token.beginLine, token.beginColumn);
    constraint.expr = expr();
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public JoinConstraintUsing joinConstraintUsing() throws ParseException {
    JoinConstraintUsing constraint = new JoinConstraintUsing();
    Name column;

    constraint.columns = new ArrayList<Name>();
    jj_consume_token(USING);
        constraint.setBegin(token.beginLine, token.beginColumn);
    jj_consume_token(LP);
    column = name();
        constraint.columns.add(column);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[182] = jj_gen;
        break label_36;
      }
      jj_consume_token(COMMA);
      column = name();
            constraint.columns.add(column);
    }
    jj_consume_token(RP);
        constraint.setEnd(token.endLine, token.endColumn);
        {if (true) return constraint;}
    throw new Error("Missing return statement in function");
  }

  final public OrderingTerm orderingTerm() throws ParseException {
    OrderingTerm term = new OrderingTerm();
    term.expr = expr();
        term.setBegin(term.expr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);
            term.order = OrderingTerm.Order.ASC;
        break;
      case DESC:
        jj_consume_token(DESC);
            term.order = OrderingTerm.Order.DESC;
        break;
      default:
        jj_la1[183] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[184] = jj_gen;
      ;
    }
        term.setEnd(token.endLine, token.endColumn);
        {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public SelectCompound.Operator compoundOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNION:
      jj_consume_token(UNION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
            {if (true) return SelectCompound.Operator.UNION_ALL;}
        break;
      default:
        jj_la1[185] = jj_gen;
        ;
      }
        {if (true) return SelectCompound.Operator.UNION;}
      break;
    case INTERSECT:
      jj_consume_token(INTERSECT);
        {if (true) return SelectCompound.Operator.INTERSECT;}
      break;
    case EXCEPT:
      jj_consume_token(EXCEPT);
        {if (true) return SelectCompound.Operator.EXCEPT;}
      break;
    default:
      jj_la1[186] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IndexedBy indexedBy() throws ParseException {
    IndexedBy indexedBy = new IndexedBy();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INDEXED:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDEXED:
        jj_consume_token(INDEXED);
                    indexedBy.setBegin(token.beginLine, token.beginColumn);
        jj_consume_token(BY);
        indexedBy.index = name();
        break;
      case NOT:
        jj_consume_token(NOT);
                indexedBy.setBegin(token.beginLine, token.beginColumn);
        jj_consume_token(INDEXED);
        break;
      default:
        jj_la1[187] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            indexedBy.setEnd(token.endLine, token.endColumn);
            {if (true) return indexedBy;}
      break;
    default:
      jj_la1[188] = jj_gen;
      ;
    }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public UpdateStmt updateStmt() throws ParseException {
    UpdateStmt stmt = new UpdateStmt();
    ColumnAssignment assignment;

    stmt.assignments = new ArrayList<ColumnAssignment>();
    jj_consume_token(UPDATE);
        stmt.setBegin(token.beginLine, token.beginColumn);
        stmt.type = UpdateStmt.Type.UPDATE;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROLLBACK:
        jj_consume_token(ROLLBACK);
                stmt.type = UpdateStmt.Type.UPDATE_OR_ROLLBACK;
        break;
      case ABORT:
        jj_consume_token(ABORT);
                stmt.type = UpdateStmt.Type.UPDATE_OR_ABORT;
        break;
      case REPLACE:
        jj_consume_token(REPLACE);
                stmt.type = UpdateStmt.Type.UPDATE_OR_REPLACE;
        break;
      case FAIL:
        jj_consume_token(FAIL);
                stmt.type = UpdateStmt.Type.UPDATE_OR_FAIL;
        break;
      case IGNORE:
        jj_consume_token(IGNORE);
                stmt.type = UpdateStmt.Type.UPDATE_OR_IGNORE;
        break;
      default:
        jj_la1[189] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[190] = jj_gen;
      ;
    }
    stmt.qualifiedTable = qualifiedTableName();
    jj_consume_token(SET);
    assignment = columnAssignment();
        stmt.assignments.add(assignment);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[191] = jj_gen;
        break label_37;
      }
      jj_consume_token(COMMA);
      assignment = columnAssignment();
                stmt.assignments.add(assignment);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      stmt.where = expr();
      break;
    default:
      jj_la1[192] = jj_gen;
      ;
    }
    stmt.constraint = eventConstraint();
        stmt.setEnd(token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedTableName qualifiedTableName() throws ParseException {
    QualifiedTableName qualifiedTable = new QualifiedTableName();
    if (jj_2_36(2)) {
      // Anticipate the occurrence of a dot.
              qualifiedTable.database = name();
            qualifiedTable.setBegin(qualifiedTable.database);
      jj_consume_token(DOT);
    } else {
      ;
    }
    qualifiedTable.table = name();
        if (qualifiedTable.database == null) {
            qualifiedTable.setBegin(qualifiedTable.table);
        }
    qualifiedTable.indexedBy = indexedBy();
        qualifiedTable.setEnd(token.endLine, token.endColumn);
        {if (true) return qualifiedTable;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnAssignment columnAssignment() throws ParseException {
    Name column;
    Expression expr;
    column = name();
    jj_consume_token(EQUAL_1);
    expr = expr();
        {if (true) return new ColumnAssignment(new Block(column.beginLine, column.beginColumn, token.endLine,
            token.endColumn), column, expr);}
    throw new Error("Missing return statement in function");
  }

  final public VacuumStmt vacuumStmt() throws ParseException {
    jj_consume_token(VACUUM);
        VacuumStmt stmt = new VacuumStmt();
        stmt.setBeginEnd(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_3_3() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(CAST)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_scan_token(TRIGGER)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(BLOB)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(BETWEEN)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(BETWEEN)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(INITIALLY)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(DEFERRABLE)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(DEFERRABLE)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(TRIGGER)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(PARAMETER)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(RAISE)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_scan_token(VIEW)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(INDEX)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(BIT_NOT)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(NOTNULL)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(ISNULL)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(UNIQUE)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_scan_token(INDEX)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) return true;
    }
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public ASTParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[193];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x918000,0x0,0x918000,0x918000,0x0,0x0,0x918000,0x0,0x0,0x0,0x1000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x80000,0x80000,0x0,0x0,0x0,0x40000,0x0,0x0,0x60000000,0x0,0x0,0x0,0x0,0x60000000,0x80000,0x80000,0x200000,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x402000,0x402000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x18000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x18000000,0x0,0x0,0x10000000,0x8000000,0x0,0x0,0x18000000,0x18000000,0x0,0x18000000,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x0,0x40000,0x40000,0x0,0x0,0x0,0x40000,0x40000,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x4000,0x0,0x0,0x0,0x400,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1095009,0x0,0x1095009,0x1095009,0x0,0x1000000,0x80001,0x5008,0x10000,0x0,0x0,0x0,0x0,0x0,0x100,0x400800,0x400800,0x0,0x80001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x204,0x0,0x0,0x0,0x4,0x200,0x2000,0x2000,0x0,0xe0,0x0,0x0,0x4,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x200,0x0,0x400,0x800,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x4000000,0x0,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x8000e0,0x40000000,0x40000000,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x8000e0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000e0,0x0,0x0,0x8000e0,0x0,0x8000,0x0,0x8080e0,0x8080e0,0x0,0x8000e0,0x0,0x40000,0x2000000,0x0,0x2000000,0xe0,0xe0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x8000,0x8000,0x0,0x10000000,0x0,0x0,0x0,0x80000000,0x8000e0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x10,0x0,0x0,0x0,0x2000,0x2000,0x0,0x200000,0x0,0x0,0x2000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x200,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10100000,0x10100000,0x0,0x2000000,0x400000,0x800000,0x8,0x80,0x4,0x10000000,0x0,0x0,0x2,0x400,0x400,0x0,0x4000000,0x200,0x0,0x0,0x200,0x200,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x8000000,0x8000000,0x80000,0x0,0x2,0x2,0x2,0x2,0x20000000,0x0,0x2800000,0x1946010,0x942000,0x1804000,0x800000,0x140000,0x942000,0x800000,0x800010,0x0,0x0,0x0,0x2800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x0,0x0,0x2800000,0x2800000,0x0,0x2800000,0x0,0x0,0x0,0x0,0x4,0x2000000,0x2000000,0x4,0x20000000,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2800000,0x0,0x0,0x0,0x228100,0x0,0x0,0x0,0x0,0x0,0x0,0x80008000,0x28100,0x80008000,0x228100,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x800,0x800040,0x800040,0x4,0x20000000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x2801a582,0x0,0x2801a582,0x2801a582,0x8,0x0,0x0,0x0,0x2801a582,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x800000,0x800000,0x8000,0x400000,0x8000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x180000,0x180000,0x0,0x0,0x0,0x0,0x4000024,0x0,0x0,0x0,0x0,0x4000024,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x20800,0x0,0x0,0x0,0x2400,0x0,0x180000,0x180000,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x8010400,0x8010400,0x180000,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x40,0x40,0x0,0x0,0x40,0x40,0x0,0x0,0x10000,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x10,0x0,0x0,0x10,0x10,0x0,0x10,0x0,0x0,0x2000,0x0,0x2000,0x0,0x0,0x2400,0x0,0x400,0x0,0x0,0x40010000,0x40010000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x2400,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x40000000,0x40000000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x9000000,0x0,0x0,0x0,0x9000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x80000000,0x9000000,0x0,0x9000000,0x80000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x13400000,0x180,0x180,0x0,0x0,0x80000000,0x80000000,0x80000000,0x80000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x10000000,0x10000000,0x10000000,0x4,0x80000000,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f402180,0x3c0000,0x3c0000,0x0,0x0,0x0,0x3c0000,0x0,0x0,0x0,0x19000000,0x80000000,0x1f402180,0x3c000,0x3c000,0x0,0x1e00,0x1e00,0x180,0x180,0x70,0x70,0x8,0x0,0x1f402180,0x2180,0x4000000,0x3400000,0x10000000,0x0,0x80000000,0x1f402190,0x1f402190,0x8000000,0x1f402180,0x2,0x0,0x0,0x9000000,0x0,0x0,0x3400000,0x0,0x0,0x0,0x80000000,0x10000000,0x0,0x10000000,0x80000000,0x80000000,0x80000000,0x10040000,0x10040000,0x400180,0x9000000,0x0,0x9000000,0x0,0x0,0x0,0x80000000,0x0,0x4,0x80000000,0x0,0x0,0x1f402180,0x9000010,0x9000000,0x0,0x80000000,0x9000000,0x10000000,0x0,0x9000000,0x0,0x9000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x4,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[36];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ASTParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ASTParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ASTParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ASTParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ASTParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ASTParser(ASTParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ASTParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[164];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 193; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 164; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 36; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
