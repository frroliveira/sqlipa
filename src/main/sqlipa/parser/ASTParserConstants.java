/* Generated By:JavaCC: Do not edit this line. ASTParserConstants.java */
package main.sqlipa.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ASTParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int BLOCK_COMMENT = 9;
  /** RegularExpression Id. */
  int ABORT = 10;
  /** RegularExpression Id. */
  int ACTION = 11;
  /** RegularExpression Id. */
  int ADD = 12;
  /** RegularExpression Id. */
  int AFTER = 13;
  /** RegularExpression Id. */
  int ALL = 14;
  /** RegularExpression Id. */
  int ALTER = 15;
  /** RegularExpression Id. */
  int ANALYZE = 16;
  /** RegularExpression Id. */
  int AND = 17;
  /** RegularExpression Id. */
  int AS = 18;
  /** RegularExpression Id. */
  int ASC = 19;
  /** RegularExpression Id. */
  int ATTACH = 20;
  /** RegularExpression Id. */
  int AUTOINCREMENT = 21;
  /** RegularExpression Id. */
  int BEFORE = 22;
  /** RegularExpression Id. */
  int BEGIN = 23;
  /** RegularExpression Id. */
  int BETWEEN = 24;
  /** RegularExpression Id. */
  int BY = 25;
  /** RegularExpression Id. */
  int CASCADE = 26;
  /** RegularExpression Id. */
  int CASE = 27;
  /** RegularExpression Id. */
  int CAST = 28;
  /** RegularExpression Id. */
  int CHECK = 29;
  /** RegularExpression Id. */
  int COLLATE = 30;
  /** RegularExpression Id. */
  int COLUMN = 31;
  /** RegularExpression Id. */
  int COMMIT = 32;
  /** RegularExpression Id. */
  int CONFLICT = 33;
  /** RegularExpression Id. */
  int CONSTRAINT = 34;
  /** RegularExpression Id. */
  int CREATE = 35;
  /** RegularExpression Id. */
  int CROSS = 36;
  /** RegularExpression Id. */
  int CURRENT_DATE = 37;
  /** RegularExpression Id. */
  int CURRENT_TIME = 38;
  /** RegularExpression Id. */
  int CURRENT_TIMESTAMP = 39;
  /** RegularExpression Id. */
  int DATABASE = 40;
  /** RegularExpression Id. */
  int DEFAULT_ = 41;
  /** RegularExpression Id. */
  int DEFERRABLE = 42;
  /** RegularExpression Id. */
  int DEFERRED = 43;
  /** RegularExpression Id. */
  int DELETE = 44;
  /** RegularExpression Id. */
  int DESC = 45;
  /** RegularExpression Id. */
  int DETACH = 46;
  /** RegularExpression Id. */
  int DISTINCT = 47;
  /** RegularExpression Id. */
  int DROP = 48;
  /** RegularExpression Id. */
  int EACH = 49;
  /** RegularExpression Id. */
  int ELSE = 50;
  /** RegularExpression Id. */
  int END = 51;
  /** RegularExpression Id. */
  int ESCAPE = 52;
  /** RegularExpression Id. */
  int EXCEPT = 53;
  /** RegularExpression Id. */
  int EXCLUSIVE = 54;
  /** RegularExpression Id. */
  int EXISTS = 55;
  /** RegularExpression Id. */
  int EXPLAIN = 56;
  /** RegularExpression Id. */
  int FAIL = 57;
  /** RegularExpression Id. */
  int FOR = 58;
  /** RegularExpression Id. */
  int FOREIGN = 59;
  /** RegularExpression Id. */
  int FROM = 60;
  /** RegularExpression Id. */
  int FULL = 61;
  /** RegularExpression Id. */
  int GLOB = 62;
  /** RegularExpression Id. */
  int GROUP = 63;
  /** RegularExpression Id. */
  int HAVING = 64;
  /** RegularExpression Id. */
  int IF = 65;
  /** RegularExpression Id. */
  int IGNORE = 66;
  /** RegularExpression Id. */
  int IMMEDIATE = 67;
  /** RegularExpression Id. */
  int IN = 68;
  /** RegularExpression Id. */
  int INDEX = 69;
  /** RegularExpression Id. */
  int INDEXED = 70;
  /** RegularExpression Id. */
  int INITIALLY = 71;
  /** RegularExpression Id. */
  int INNER = 72;
  /** RegularExpression Id. */
  int INSERT = 73;
  /** RegularExpression Id. */
  int INSTEAD = 74;
  /** RegularExpression Id. */
  int INTERSECT = 75;
  /** RegularExpression Id. */
  int INTO = 76;
  /** RegularExpression Id. */
  int IS = 77;
  /** RegularExpression Id. */
  int ISNULL = 78;
  /** RegularExpression Id. */
  int JOIN = 79;
  /** RegularExpression Id. */
  int KEY = 80;
  /** RegularExpression Id. */
  int LEFT = 81;
  /** RegularExpression Id. */
  int LIKE = 82;
  /** RegularExpression Id. */
  int LIMIT = 83;
  /** RegularExpression Id. */
  int MATCH = 84;
  /** RegularExpression Id. */
  int NATURAL = 85;
  /** RegularExpression Id. */
  int NO = 86;
  /** RegularExpression Id. */
  int NOT = 87;
  /** RegularExpression Id. */
  int NOTNULL = 88;
  /** RegularExpression Id. */
  int NULL = 89;
  /** RegularExpression Id. */
  int OF = 90;
  /** RegularExpression Id. */
  int OFFSET = 91;
  /** RegularExpression Id. */
  int ON = 92;
  /** RegularExpression Id. */
  int OR = 93;
  /** RegularExpression Id. */
  int ORDER = 94;
  /** RegularExpression Id. */
  int OUTER = 95;
  /** RegularExpression Id. */
  int PLAN = 96;
  /** RegularExpression Id. */
  int PRAGMA = 97;
  /** RegularExpression Id. */
  int PRIMARY = 98;
  /** RegularExpression Id. */
  int QUERY = 99;
  /** RegularExpression Id. */
  int RAISE = 100;
  /** RegularExpression Id. */
  int REFERENCES = 101;
  /** RegularExpression Id. */
  int REGEXP = 102;
  /** RegularExpression Id. */
  int REINDEX = 103;
  /** RegularExpression Id. */
  int RELEASE = 104;
  /** RegularExpression Id. */
  int RENAME = 105;
  /** RegularExpression Id. */
  int REPLACE = 106;
  /** RegularExpression Id. */
  int RESTRICT = 107;
  /** RegularExpression Id. */
  int RIGHT = 108;
  /** RegularExpression Id. */
  int ROLLBACK = 109;
  /** RegularExpression Id. */
  int ROW = 110;
  /** RegularExpression Id. */
  int SAVEPOINT = 111;
  /** RegularExpression Id. */
  int SELECT = 112;
  /** RegularExpression Id. */
  int SET = 113;
  /** RegularExpression Id. */
  int TABLE = 114;
  /** RegularExpression Id. */
  int TEMP = 115;
  /** RegularExpression Id. */
  int TEMPORARY = 116;
  /** RegularExpression Id. */
  int THEN = 117;
  /** RegularExpression Id. */
  int TO = 118;
  /** RegularExpression Id. */
  int TRANSACTION = 119;
  /** RegularExpression Id. */
  int TRIGGER = 120;
  /** RegularExpression Id. */
  int UNION = 121;
  /** RegularExpression Id. */
  int UNIQUE = 122;
  /** RegularExpression Id. */
  int UPDATE = 123;
  /** RegularExpression Id. */
  int USING = 124;
  /** RegularExpression Id. */
  int VACUUM = 125;
  /** RegularExpression Id. */
  int VALUES = 126;
  /** RegularExpression Id. */
  int VIEW = 127;
  /** RegularExpression Id. */
  int VIRTUAL = 128;
  /** RegularExpression Id. */
  int WHEN = 129;
  /** RegularExpression Id. */
  int WHERE = 130;
  /** RegularExpression Id. */
  int CONCATENATION = 131;
  /** RegularExpression Id. */
  int STAR = 132;
  /** RegularExpression Id. */
  int SLASH = 133;
  /** RegularExpression Id. */
  int MODULO = 134;
  /** RegularExpression Id. */
  int PLUS = 135;
  /** RegularExpression Id. */
  int MINUS = 136;
  /** RegularExpression Id. */
  int SHIFT_HIGH = 137;
  /** RegularExpression Id. */
  int SHIFT_LOW = 138;
  /** RegularExpression Id. */
  int BIT_AND = 139;
  /** RegularExpression Id. */
  int BIT_OR = 140;
  /** RegularExpression Id. */
  int BIT_NOT = 141;
  /** RegularExpression Id. */
  int LESS = 142;
  /** RegularExpression Id. */
  int LESS_OR_EQUAL = 143;
  /** RegularExpression Id. */
  int GREATER = 144;
  /** RegularExpression Id. */
  int GREATER_OR_EQUAL = 145;
  /** RegularExpression Id. */
  int EQUAL_1 = 146;
  /** RegularExpression Id. */
  int EQUAL_2 = 147;
  /** RegularExpression Id. */
  int NOT_EQUAL_1 = 148;
  /** RegularExpression Id. */
  int NOT_EQUAL_2 = 149;
  /** RegularExpression Id. */
  int NUMERIC = 150;
  /** RegularExpression Id. */
  int EXPONENT = 151;
  /** RegularExpression Id. */
  int STRING = 152;
  /** RegularExpression Id. */
  int BLOB = 153;
  /** RegularExpression Id. */
  int PARAMETER = 154;
  /** RegularExpression Id. */
  int ID = 155;
  /** RegularExpression Id. */
  int LP = 156;
  /** RegularExpression Id. */
  int RP = 157;
  /** RegularExpression Id. */
  int SEMICOLON = 158;
  /** RegularExpression Id. */
  int COMMA = 159;
  /** RegularExpression Id. */
  int DOT = 160;
  /** RegularExpression Id. */
  int DIGIT = 161;
  /** RegularExpression Id. */
  int CHAR = 162;
  /** RegularExpression Id. */
  int HEX_CHAR = 163;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_BLOCK_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"\\r\"",
    "<LINE_COMMENT>",
    "\"/*\"",
    "<token of kind 8>",
    "\"*/\"",
    "\"ABORT\"",
    "\"ACTION\"",
    "\"ADD\"",
    "\"AFTER\"",
    "\"ALL\"",
    "\"ALTER\"",
    "\"ANALYZE\"",
    "\"AND\"",
    "\"AS\"",
    "\"ASC\"",
    "\"ATTACH\"",
    "\"AUTOINCREMENT\"",
    "\"BEFORE\"",
    "\"BEGIN\"",
    "\"BETWEEN\"",
    "\"BY\"",
    "\"CASCADE\"",
    "\"CASE\"",
    "\"CAST\"",
    "\"CHECK\"",
    "\"COLLATE\"",
    "\"COLUMN\"",
    "\"COMMIT\"",
    "\"CONFLICT\"",
    "\"CONSTRAINT\"",
    "\"CREATE\"",
    "\"CROSS\"",
    "\"CURRENT_DATE\"",
    "\"CURRENT_TIME\"",
    "\"CURRENT_TIMESTAMP\"",
    "\"DATABASE\"",
    "\"DEFAULT\"",
    "\"DEFERRABLE\"",
    "\"DEFERRED\"",
    "\"DELETE\"",
    "\"DESC\"",
    "\"DETACH\"",
    "\"DISTINCT\"",
    "\"DROP\"",
    "\"EACH\"",
    "\"ELSE\"",
    "\"END\"",
    "\"ESCAPE\"",
    "\"EXCEPT\"",
    "\"EXCLUSIVE\"",
    "\"EXISTS\"",
    "\"EXPLAIN\"",
    "\"FAIL\"",
    "\"FOR\"",
    "\"FOREIGN\"",
    "\"FROM\"",
    "\"FULL\"",
    "\"GLOB\"",
    "\"GROUP\"",
    "\"HAVING\"",
    "\"IF\"",
    "\"IGNORE\"",
    "\"IMMEDIATE\"",
    "\"IN\"",
    "\"INDEX\"",
    "\"INDEXED\"",
    "\"INITIALLY\"",
    "\"INNER\"",
    "\"INSERT\"",
    "\"INSTEAD\"",
    "\"INTERSECT\"",
    "\"INTO\"",
    "\"IS\"",
    "\"ISNULL\"",
    "\"JOIN\"",
    "\"KEY\"",
    "\"LEFT\"",
    "\"LIKE\"",
    "\"LIMIT\"",
    "\"MATCH\"",
    "\"NATURAL\"",
    "\"NO\"",
    "\"NOT\"",
    "\"NOTNULL\"",
    "\"NULL\"",
    "\"OF\"",
    "\"OFFSET\"",
    "\"ON\"",
    "\"OR\"",
    "\"ORDER\"",
    "\"OUTER\"",
    "\"PLAN\"",
    "\"PRAGMA\"",
    "\"PRIMARY\"",
    "\"QUERY\"",
    "\"RAISE\"",
    "\"REFERENCES\"",
    "\"REGEXP\"",
    "\"REINDEX\"",
    "\"RELEASE\"",
    "\"RENAME\"",
    "\"REPLACE\"",
    "\"RESTRICT\"",
    "\"RIGHT\"",
    "\"ROLLBACK\"",
    "\"ROW\"",
    "\"SAVEPOINT\"",
    "\"SELECT\"",
    "\"SET\"",
    "\"TABLE\"",
    "\"TEMP\"",
    "\"TEMPORARY\"",
    "\"THEN\"",
    "\"TO\"",
    "\"TRANSACTION\"",
    "\"TRIGGER\"",
    "\"UNION\"",
    "\"UNIQUE\"",
    "\"UPDATE\"",
    "\"USING\"",
    "\"VACUUM\"",
    "\"VALUES\"",
    "\"VIEW\"",
    "\"VIRTUAL\"",
    "\"WHEN\"",
    "\"WHERE\"",
    "\"||\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"+\"",
    "\"-\"",
    "\"<<\"",
    "\">>\"",
    "\"&\"",
    "\"|\"",
    "\"~\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\"<>\"",
    "<NUMERIC>",
    "<EXPONENT>",
    "<STRING>",
    "<BLOB>",
    "<PARAMETER>",
    "<ID>",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "<DIGIT>",
    "<CHAR>",
    "<HEX_CHAR>",
  };

}
